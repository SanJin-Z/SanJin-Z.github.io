<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>欢迎光临</title>
    <url>/2021/020116107.html</url>
    <content><![CDATA[<p>你好 ! 欢迎来到我的博客</p>
<p>此博客创立于2021年初</p>
<p>主要用于分享<font color=red>BIM学习、工作中的经验</font>、总结，个人的阅读记录，学习经验，与朋友的交流等</p>
<p>转载文章会尽量标明原作者，原链接，不用做商业用途，如有侵权行为请联系我</p>
<p>博客秉承互联网<font color=red>开源共享</font>的精神，非私密文章（私密文章一般是个人生活相关），可转载复制</p>
<h2 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h2><h3 id="评论区"><a href="#评论区" class="headerlink" title="评论区"></a>评论区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">可用于反馈bug，评论文章，描述问题，和谐友好原则</span><br></pre></td></tr></table></figure>
<h3 id="文章分类"><a href="#文章分类" class="headerlink" title="文章分类"></a>文章分类</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文章在此处按类别形成合集，如“BIM软件操作”，“阅读笔记”等，分类有优先级，低级隶属于高级</span><br></pre></td></tr></table></figure>
<h3 id="文章标签"><a href="#文章标签" class="headerlink" title="文章标签"></a>文章标签</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文章本身还可有标签，如“Revit”，“二次开发相关”等，无优先级，方便查看所有含有某标签的文章</span><br></pre></td></tr></table></figure>
<h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">支持关键字搜索，输入后回车即可</span><br></pre></td></tr></table></figure>
<p>更多功能：文章加密，舒服的视频浏览功能，切换夜间模式等正在开发，欢迎评论提建议</p>
]]></content>
  </entry>
  <entry>
    <title>节点4模拟</title>
    <url>/2021/03167266.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="96cb04267ed22d1687b9a998d4c8d7e3b308531337658d45a90bf85f5930985b">e8e834e7d414ba1bfd4a64633c05acb4cc4fefdd4384d57d22b0dc479a5aeec1f1cbdc7a5016fe3d0eb27813611c59882fbb2dcad27a2ac77289c1533c35a4758040147322a739cd9675abe870fd4bfed31f53ac3faa9b2bddcde5295f6eacc9d5d83f13dc471a31b320337f06800a4cb29c58bb826269eb0509b93e216f96135c3ae228391cdaaf981db835ada895cd2eaa12b981f9b0a1d6d9d29187be3b0d949fdbc682c89f297a81aae1e35ad29a71f9781f9637904a340b7fba7c9ba7afd03f6814e509d0fa8719388f35e2b7361a6f58c53955e17841f81f02e450291286800a1acf82c0fe0a2a003ae3cf0e0729b0a1572fcfaec5e087718f47abf4c633ab5e4c697d2e15fc02917675ec116c05f11382a692dbebb9f7de7f77e3dc22d766b20dbab0dc54f177781ba12b8ef923c0fd6fa23657c675f331e652bae3e5fb4ecad110460ab5eecf1f8b20ac5407c578d0cc2e2289a42d5f7f4b6fdcdceacb1ebeb5a06f15873c7a4c10202f91ab1f8c14bcd5344dbf98a44ba580f35e0221b34e5c41df4ca0ce60457a00089ed8876419e56ee061cb8c24dcff8b380348469d31d0ab1d04ecc1d7344bce36d299b4e28559b2a7d71366e69874302cadbc5d1b372563aaab4028a0b3c5dfccd95fa1cab46662cc3fea55a43d241cee64173359338556a2ada4900ea20a53be2f291b98ebb543fd310b248bd807275586036756ac915a111801561bfbf8c7914216ae4f3522f7924ff5679f4e05e113747330025a2c47e20665b8581614b500b200add20f57b443a536b5b2290a5c401b20733cfe5f38cd100c40ee230155c8a05b27b0303b59cab931460702022a976bad4c93495b145a6aa853a4b9f5bfe42c02ee37fc56169d58e8b8b0a6d0e9e22f3f159d1b74c6dbd752a4fe3418ed1dc6ec053ed8aaa533838738b5e36a67548e149e8503f67d4e74179fcf02e6c38f065f59d008f2f594bc18416a83e0c5b1015504ea385157485b7b87b31aaea584fa689600922f02473dd5e51210007153edd4927ed9b2293e946718fc0867f9bb0632d10f98b1e98840fbc9d49f642d0b8c1e461ba59bc82dcc8c1201bb1b72d4f99c7dce86a8da7b63e5a30ad70ef544a466d744ddb8490825d1c67a3e7ac71a919a09588e90f2fc34fffc5cb1654ebe908e84d5c821b895024f2d53b80dd7811a4bb24b989b9c7dd1aec70b9967182c6cedecd90f506b00732b820fcf61010f80153ab1c2aa6ad6e7a04e49393b6038ac80fc33ef543f17d3d43a2b37d1a4fbb10a2acd06c853edd0e29da7a5249d06f3b7119dd1836ee2b2392547dc758c794c1580df51ebfbfe320e7b94f283cd1eebcaa31dc3adb37af87c8f02816b554d76cb44f7e0d6355dbb5957be316f424061cbed15ada8c2a6d4b464e441e9ceed646b8e20122c9908517295167d05687a695aac484ceb9883b4c5e3ef0af6610eb0aa052433397b6201925f67d1dd7d36ca315220bd682903ad9fc8cb1302bc500bb7f4020979cab29b83edef00e8f06026f2c07fb18598df476754d58152b5b856e4afac0a41e8ecbcc74b114efd09fc136b577acbb2990ef7cf998b7b12cc191d36dcc8b09559db1fb37401e1d2138eaaca2ae4ce4c66fa0c22cad96bb59e7e987abf39a622112e4e4991f89330e5f533cc37b0b834865aac68ee77d34a5ffba63bbf503db8c4dd895cb6034f6cb6de25ed977455326cbd96d0de7b2c59ecfdb0345d2b752bc840c60c2770eacae3f7a03cb40586204b2b89d9a20ab5b6980f45a7422592272211fd86c9e6308c00ac232b2d49a66d4cfe1dc70f5a657f3d0cfe273801c8806ccd0a6f4205c7c2771e14deacfb430767d4482ca2eef0426209065d2a1b82cd857521b3f53adb724dff3cac594d940d5b6b4e4259dd9e17af762da2a39feca17ecddeafb976af305f49c921d1e00a4d520bc3c99ca8482be8d5442bd2030ca11750f8f5db2506268669eeffd1c4d414b577c0395d8e60ee2d481606bcbf9b3bf95b87a4192e5447b35c61e96db325773919d40377b5dd1befb3baace277176ff0ca7c8375d3ad8eeffad90dafe5a048ebc8b0d5e6983d4817da2595ab7c8d9cfda5f20feed7225667a2030808cd11d6ee8b5793c2e0e035ae7ee25900f3d171aa86a88b35723becb78a2a007f7d0ac1a7399b481ae7726eb79b8e8f0b383dd089d4075c44a9213a001443549c6799839e1962ecd096fdec828836895ca132bd1bf684352759a4ebc4969d9c309fe43b285a24de215bbabdc8e6552e2aa226aa5715d0475f111bb48d322d665c362e3311154f2163218a3df3d09ef163bce6113de76180ddee9dd113dd643703b41dd5e997cdfe8b9eecdf0f1d87d4e26ea31893b11f09b0a216351f21c9c0febaed12152d4d5eb0b5e05d6e111c6001c5f0a9d56f9e0b13dcce3d503afa5d2e20b3c15f79319c8b5641050ca104dfc4a253490f8e94278140a4fcc4fc6db497ca3d6a527c0ee826876ca51489fcfa03585c3c7618936a256ddb83674773818b5a8108e1a0c4ff1005afa3625b2c87eee1360e26ee9e4efc53871cef7409bce82af9517fcccfa25944af38162659241da12b617a9470a52bec14dbd72338849cceb613218096492fb2531ad5d07b5044e087e7a91a690091bc663ddf0fbdb519d754276044cb18c081e30eed01009397d7ddcb20214610f2045c9318e7eacc711ca4b87c66f756a28ed70f9b4cb68d74ac9a6033948e4e5aeb5dfae39ad3e8c9701e8b60439a197e11ac92ad0a82dbd369735124202e1d04cd76273903a6a2c7b84b05511a7dccd1d857962377e1c917a66c5366404a7eae4aec08307e7ca6d96468455dd7f40adc39ad4ba33dbc41ad589bc770b6a70d0091d6a89a033e07463095c356849fd57c9737d022ba35fd96f702f7c81c46d5ec058c5602b2c2f61c222b5aeae860e81a7c9e1eff778fed5ba458a6886376bc640d90c5e5d66540975b61d74eb7a3f93e888a5af524e5a1e50cb6fceafd1c2db2f6cc4f1aabe32dc3e1b92319baf5eddecfa622e88916e235a8fc0b4f146181aa4a8621d843e61199ede75b91513cbf3486b473c26c354a0a3324a7b1df7c9ce8f11693aacaa019e8991a17fa76c46f87636a28b8488afc1e09a2e6830efc7f81fa6453397d0fdc2159f3e5659411ba319d1b40abc8bf6720a22f1b77860b634fc30612806f50dc15c91f9b00f1e02e5fa8d862498c4198cb32d51924349d101fa9ebfcb2f4e94eb788e1b2de76b2270f3db552d8a9a40c93fed3cf00d8b1cbccd8be5b90c4477c99a9aed822ab1b7b2828d9ec97f30535ff18325501dbdb7d613ecd95285d170ad0ce1df8f5e1dcfe1a607be0219bfe7012d1fbc77302499a27ebabbee1042435c0b83d4ad1ac9c11ee0f72c5065726a77b6cf22b9d4f9d672584262cddd81eab252a2703dfdea11eb8d7f6fa4f80299ee104e6a1aa207a6e1c438f503252d87f562b6ad6404c67b524ca8e60da08275cb33c85b4c26f0e960fdd1557ec26467f121901a27e19f0becb6c816bd6c335e6cf271532ad2acb4b83d0cb8a9fa2b7abba5e80ef329fda1e094655fedc41ab40a1df287a9d2f68eb1c656d49687f69a1c6bd7096382a326b0c1d9f59c2adf41f32aaf9a33b604402a9c06ad28cb599892e7af9dc8b7bcaaf92eb12b6f388fd74009e48be5d9e98604d1ba8c41a6ab24a4939b566f06069e91cc688ccb48daf47094794e143bc3b2e423a0fd7e4c2a5aa5b5aac6a8d2c586604b76f58f47efde597b8764444a3abc8ab7e9678531b3bcefaa698bcff0931a40b7fa921f082f0d3ba8cc78bad2e4a78eef45e4e008f64f2d91179f774ac59ccb358119eae8e3839887fba6b6d8ae0268f4c05679b1d537a26e83e7bb7398e561d07287de5491c805d76eb449667fab3fdf8f2d6299cd6aad75aed6352dcd2859e749667262089f5b97a1c79fd8e565c9eaa3b134e156319b2e6e28c8d3fc81487a2cd9d1c7b982e931f5e0607c4e0e60a5afc19dc32262bab13f34b661fedf730c6d4610393ae4e5dc0b5cf3cf9a69a247058966d3034ad984049604165d796cff050f9c06d3fd1ec8e105338601f66e61d9c2fae0613c3205470f6c4b1997ad81ff4978f5fede7cc9639a671e213a815d0c33665f7a8074fa98dca845f8438741afb9861fbc95d06a4a1db6849030e7d197db422943efbb860c5ec9927f3d73b150b505ccc60af2cc0102e968889805e7efa1e2f52a3c192bfa58519af07bbbdeccfbfa1ffc373df4f526090cf267212018cc34d9f22b1dd3b5ced452c371a8fbf90f7239e9e50317bd654bc018431c48f66f10b28285244ed2817c9a0ca0b1048705605564f20a7ab30d52b7473f5f3c05df16c628470a3b01df516e718d7275be24de12845e08dec9744b008e761e91bf179a68b6eca1fb7f4f54b8db3d8a41c0f25005d254256cdb68b9f3f32b8f9aa5352ec53e1f7abb479f82a08464d3d27d5adfec3f6b51465c68ce0bef25056bbb49bcc9286695c927a303d6e7e72963a0c0481d2b36545d7edc58c431ac3bf3106cd837853222dcce80c94e79a8288e057e3ec9dcbf294f7ccd7fd71db3f40504ec140cac29108f589aa712e3df46920b7c05d04298d82af145e7d55e6a0ddc6450c286e7e5cb0557b760aa5b8e8e541959549fcbc40953b125674d3dfd56da87780073c67d4d78c4de9e28e45608a5e3f576313689db1180479cffd57da50b17c84a606a7481f9b331808bc5a2ae6d7fdfbaedccc45959b517a8b36817a3950bf11d8c54411ee07c0098d4f383479c51e692cf00b48f5fba315ca88b20934bea1ac5d550bad589e418be21941cd3f9ff7b7db612f9a578b14f0574bc74504ab5674b8b4cde01e75cffd95557603b56bbab6297a528063561c60b31ab4ba08a8658ec42d9717cdf66937c8aa9e85c9d811cf134f2619958849374c7b07f003493b61fb9d2d644fab3a8999fed7ccf2176b438738bbc91ceb2acd5ccd245bc9d1e88e951fe63b360a9b4a007b1cacc953b3870af3c628159d671f3e77a78522d5b4e3fe38098caa9182997a0e32b3187ef0a08f05e83e4194cd7c2c7ec8e3881497a3a6789b90b24c8a6acce4bf4830aa4219cf0d1d8ded24153eb8ee4951d5b94d32a3c28c38b2bbe4866d5651deedae529a6d4998fb7f821b630bad9d7733809facce468cb9140befdf13feae11ba76336489f93770e24ebd80b0bb45212efc9d5afa4bccc4c992c25078646a6cc34326da533068c891fcac954e8289969077df4739d34cdaef06c57a5638ef8fe29e3f10dd2993f2b4def42e8de81710311c4b6118ba7a9abf03a2d6510dd22d7696e00ab285e41a4a49c8d9d7117d28379b8d3ae0b29e96f3464e8bb93fedf80bfcf9d79d6f2f94844bfda99d081180265173aa389bf876618dc645f4d0e3171b98e9ad790c5bc795d67cae07c9d99b77e6035ecb41ebacfa8dc5f66b430e2d916e5e46613e0448e6638d58f2729d31f4f5b8d0fc957c7771120aae825257d2d133d4e82b8eaeddce946a31c9f2a5036397587b612b673401454444cf3942fb83c775c4a56ffc7604ca163cbc50fdf23d5ab25fe0ca1a7f22f0028b0e4015fdd977b1fefa8415f1906c9bf26c24bc2dba1259f713d2221380e2c5f8ddbbc34315511f43ec959d9fa496b1628fbf6c7540df2db0df7ce78aed88902104c374002f29257ef5b0c8b64703c1ecaa92b4b1621f5597ac0594563276d999a1cb4aa975d9d2750d676b19c41b471b0a4e2cf7d1084cac4d150cb125fa9fb714e8b049d62235590936d8077dc42313c294921e5a775b981191e9c83da5ba7d3e59f944a9c5a1c9eb97b45fc3eaaf587b2a821b279b0b60f49930d5520ccc7016c377dc0eb87c9248432b4d1cab9478547351057c7071fb0e8f5bcea6f58d2cddcf7ac6e4f390e4ffe51c8ab755c6ddb1de08951759cd5eb095eafcaa1c5fc02b8bb061faa33a1e4fea3b598c59b1ffb48b7d7defa5a72223061e2856a3352c4c83ec2bf6ec9b0db48968b0667ab611f4cdd882de983fe35e21710795f63e418237ca5f4f4b9f3a4fd9eb9499c151a02837b7fcb5940f07a5f3883241370ba1bee597326a67972aa7c5fcbdf9569d45b1cebcdfb8002628213b945adf3376ff8e2f2cc49d7054cd687a2991980821434729825dbaaed4d77f9f0d7a8746806d5a5312339ba5d58279f9589ddd2b4837e8659d27b42512639c59b4206503bbeb7aa0df0047e85248d9bfd8bce6939d37ee55c205413e1a7a3f49dcc9654b0085b7561b42f44c261f453dc82a5d9433b99b1999b6be5cff3700c213f3d860663fee12889d5707d8390840e8b8c94443b1af3c3bcbe07ca5ddd13c8e9ee632fae43cdfceb402035cb6d7073ccfdb18ce3abdb5c348906d157dc31c70479360fde89166f70187a2086b12dc9a78e82f7d86192b287b95233852579a6d112c0da8e27cac6ec1cc824ef3fdc563444b444c12900cfec042ae88df2d276e39d5db391557840288ee60763fbbfb6ad88010b2cbc036a6fc9e708736623247a24347e5be29c637222d5554ef76f01298678b39213c4dcd8eed4e133b3802c46f8d881254b15b754ae1b280eaaa7984723eafe289ae46220ba2b7a60ee43df72709a7cb7f6300a04a13a3b2bb26a79ee78051efaf724a1c93ab5e7ad65c174da7c18bef5046d7ad3dacf5294a51bee9821bcfdec3b5750550ae02cfd98855fe9e0c40027f92e5d634b0c26f768737e8e4263f9a3ad24371bcb5fd8de272a984aa48b1f15fab0b0a12a1b1fc159c485c745283b28e6223e1a3d2e08ade959ffb14bbe451205d89bd7bb0f0f85686a926badc6b074ed5899a64b0b6f62091aeafb897738bab5399ceecf399e3e712b944d03914031b6d661e5a67561ccb1eeb191c90dd6ea6048935f57422f7ed3f47deebade00b4317ec8fd6bfcc52d22ee4e98faadb353cbcf9708cb74d2e680ec6f90ab6607a5b960bbac92a4367f7a37a8438fe79a4c00668ed5d235dc5de2d6cf8debcf26b567ce0019ddce50ab9d16de902f19f8645279f67f05c71a632ecb78537daf65579022f4f2a9d9355b4b0225a2de341fc2c9e8257c7197a6807e84b94a10ad95743ed1fe32cc8b11adb7e90492344aed40c82c4782eaf42818bf2b19bc7cdf132f22784f910885407328d2e62e542ceb58716d0b2f7b6d7af5a024e11dede21b5548456614c1e49b180f2bcf4e00ed801c692bcb4ec2ef9c6250c5b5a8619536e0c5f958c8d0f96008978cae93648f9bf590c802dfb9a921ee12917db8f9a08596e9f2a6d17abcaa089bf2b82f7bdc17480b5efc948ab05ed287dffe3436ed5985dd6d6699379287b21fff32e2480f9d12bb9385a3db3bb3407a8c6943ac30c364533844aa3020015ebcd369365de8208257dfc91094a0c3875154e3bccc30698de9299f1c3f18bd75b31b3363a900455fc698e3f2e13b18d1e4dd8577497478ce1c06bc49d692c0bfeed985998abfd6eaeef80e4e6d91f572c19957c2fec0ee0259015846e6c48442e42eb5971e0a74c35095cdf9bacc2710d84337e1f5115082f414e85b686f9a4544b74f9279a84506da77640b989131ad71a3ae5b71082d36b85bf89f74b8134f1913322e0a92719936b9acdf9323b782a51ae91a1ca70b443427bebdd263c99a3bf36b8bfc7d9c8ce44ab89eb5abdef646d7d791aa547b9b4272eafb032882ac33826d0348aca762bb5e8d1985a53fcfaf80e0a084f08b7a898228a5ca0cee0d73abc5eb3fdc4f56fc9a8732b35d5221837833be7c4e5e4ce2ecafcf6a3d67d1b4cf547f378fbd085df45a0b4921e8c55034c6552e00a23d58e58bc778975df16575824614174ea039f21f9f27e762a7b6df4111b96c66e3ac86fd7203df285b072aad1d46e61989231ffe990ac6a5b83dd02db64525a98737f6533d543b0c476ededed9acd6ddf594690f2e6f0476d9bf3bc722ffbb18a0ea14a6a6ef640b3a9e193d8f751c2f018f595f7b1c6cda63e664060e8cf4989494a0763572a5a54e102e20b707ef025c83d8c7276863230e740211d24095a531cf43886465449c8621bc8252b4d2c4c5c800cdbb4738de585252c759bf015d5e7ecf345c8dc996926354ab946078389f746381cd1f15b891a6dd048ca38de20ca982a5c07b009601fca2ca5386ef4b8e714f013061593dc7f5ea020f6b476218145510ef7b68d7a9ab44c7ae4d087a42c8e62d939f99e2224fff6816f2007497f2f5684dcd2523109790053c426426b78cd62bec400e3cea362708520f71ddae2722b6cd51d8997fde95cae45de9122c87069e33f477a5bbb8e9b4cdb0b8e7cb1a4b1c5e9ad670484570b4def252cdd00965fd9c0fd9fb4b8954fa68c47536089d3f91bb4abfa162d4419fafd33ac7fe60372054a540a0cbaf1d631032b01bc40be9b1823f405d0caf16f016e44b6304a92f464b575fb5f8e1b5fb6b86d81c6d7a5fae2bf15e701b40465fe8e116e8e2d1b872fa27d5b31bcec96f04190e54a98d7c3bfeea0d675ddef30710f9d6cd51b20979433cca87b8e3e44fa2b6661f2058d420dfa2bdd86d4ed5b70d6be29325b1e5442646d5128206a89ab9ef59f812ffc578759667edd3105bc39a7e421f5166be1110dd95b6e0ab5380e880d756b4e66eeea8cff5c5c90c5cd9214e7079fc1b6897ec8ca9b67de6057e1dcad6ada8bfd41d7c596cd184b5cc93027c4ee50a51f323ceb9584f3b98421844f028004ea79501d30f002c88b9d2eb77e4cc07cb92a72e22f053b60d5f8040ddf56ca1ed73ea9268b9184fd1cff276144bf74a1deff12efad88865ee58f0200754b2916d43f37423eb278dced2804dcc705d417fdcdc1e51a297af0048e4acc1b61b0d29529e228e328c70c83a68b48de77a38284cc09bb37c11f9e113aeb5d3f87792b24cecbe186e66697d13a5cc415876f6156ba5b8d231d96738ad0b590463953d6b69e116cb15ff6fc886a19f9bcdfc052655a8c3b756712ad7c161a25d5df68879b6b21ba622f498b15893c80c1caea0702ee5d67a79795975546337f08b80559b3609bfea4da752c3a002f2f4c857ecf9859d11641bd0b5a5a50a10af1e3363af17fd342af07d358294db9626fdfbb7f825a764b92795f5ecdab4f2135ecaef8ebbf926ea40b6353073c81af68f00acbfd64c49fad0980ed5fc311e15d8e2a4dac359ff220e588309dd05cdf976df8262b0f13d6c79df9389cfc61ea51070bdcf14243882830cd5340206b0fc560efa016f0c02df99b8ee2cabc2c8ddd4f060e2432dafa4323617ab0e089894fb330909cf871ba1981995b19c73cd511123ca1eefe7da9c3f545e298dfc477a84faa967f4b6eb546c736d2eb2b1ae4a79740b179d6c7853aa5ebe033e55f4948ee322f07a1030de3d2a5834163cfefae5951ecc98e210ebb4f28d36e66073728f24deb4d01fc5047219839886d332f7688b1baecc73cf82e2ac9761fdfa209420d79ce6bb91486747278c337bc54b7b9d6e42e591bfd51d695690a67d8cb3a80f109e3b9a5c79c2d53ca5bf549142d03984562f3f41ef38d620e411fa72bd5b921827dc7c6df807c481e48d0bab44e8e610547dd254a40b1cd0cb4d5ecf394ee12bf3664ee4b9dc9af8bebcb94cf1f6dab4e1b11001dcff07abc71c4d910118cae07057843d3b3fe76f89074b262e8d3149dcc45e28b4b085b8717905eb1c473c1ed886142e8c5b440d78f03b8fabcc1c0be9c69ecbeef3659b9897ca44546fa014d05b3ab1704c28649bd0e4701e8b7e6dc95f26df54fc532eb77fae533452641448d55e6bd4fd9280c0f9da42b22fb9d7ba2347320e488bb3cc4a41b5b213e2647eb8e1af47247405255a7d7d08b009519d8f56edb944f4e719f3474a42af20619409b9e41bf5fc59971ae5b26067a321d481225f99fcfce8663afdba77102bff9fcf347bfd5517998d3b986e5f5133fd0ec471fe9d8562563f89e11ea76bb6673635f9cfabf59cca4ec1a6c766b58ea8504d7724db741ae3598d82fca20933fe81b4d19de7464a0f1506f841a59d5907d4e115e5b7c0b53f2b019e19ed6ae9fa540c8a298296d9e00be15f9070d0caf9526cd4eb3ead0367754f03ca4b2d1382ee9b4e24a0c334d551e257bd3b212939b0abc07bdc572a2a77ee861a04ce23560aee4a0336a467d4c8994007279951f7ba90d5a98cf6d96889adbb4bfa238280c2096ce377ce1cf7f1a08292e572d78f9a89e29dca6a4651751590b40c502ccfb0469ac267d7bec84b73dadbcdd5ae31a2b7d9dd63789492249a418abcafea4ab39d810d9d7c23dfdfd7b8f65e01c74aaf8edcc768f76ed77600fefa67b110e48dc338f9e854572fffd01e90699d2b1f17f84bb7044b2d58e9b68c325bf61ffdbea95f3ad914823e5e4305164a5d7e16891b7bb7c6a91fe89d1ea3482acb33d6e51c0fb0444dc3f18bb2175658754c62f0f238eb52c555904bac2f8b7d5f573787edf4b6222ea665f3c1095dd69b138b1b31ef662d8dfe87c958316b9443bd249a3836977bb0c0a5f8aaf5c7be4e72706edfcb1167489717ff0d3089c7c934bfe9699a2114b7944aa924ab8865de1cf3151caf3017b8c50c09388bf1cf8b4b01a7a678d59723fe11dcb2af1f4e2d165a5fc1a5b6f84bc5aa992b0ce20ef80b1cad026246b6bc851804c6149e830863476d85effa0bd824f4ddb1e9b66f988364bfe5bd4d4149e99b32f09cf6cc69b7c25d24f0c98d129dae22fb64a6c20b9faf2bd0e22f0fe70535fbd4e72c6a5232f411e0d93d061acd3b21c90d2faa89c20ddaf605693649c4b31af49e012b3ccc5c1e76d4dea8a6175e164c47f989f59c5a5cb9aa6c1b1ad0c26b9c453b19c19b5ee644c6a01181864580968a805b7664e069e4f24f64631b974ff713c1d8e38fb1fc3701d3cf79b344d5dba8c8f391443493074a051e6bf93ffc2074126cb06d6cff9a1e64b9ec0cd6a0cb88e76ce27300c6c43d5c631a4a0e6fce58cdcad6247496b9f3b51db595920c7ffa0894abcaf81e4c4e9126322527f7cf00e7cbe666e47353cb39b91a04ac33736adcffadc3dee4ae3ce46772db29592866880b0f4212a72bfdf81c4a2405d306df680b4dc392275518b482c58c1316e4da892c3c8ce11bf8dd769a5546e525a359344f35a1f1c6f090f116eb07c86731e39c6e124390b86026f22d3b7d03a9186f154a6e5b2c8de7e084126fdedd35fc9d0110657972a98a080fb5d14dc9f129e5b5c6801a4973e3e7a560e463b3845de0d4555ccc3eeb3507ac05fd062bd7dbcadad7db3520c5aba6e9fadbd19d689c81af6e013061d13172b5ffa49f4017f2fccae640ac1aa9ce3a9ec336219191b2c10097101f27967eef2fd42c29865e2e2b5b2fe5c29c592d4d046d2b08179099d133c6a897c4082792aab7f5d49eb2040d67a55201e332acca35ff6c6c1f61b6f0d2ab8e2a625a8f4e55c9abdb855708873e43140b8db646b04a86e42ecbb4254adcd4ca48ead299a75f28e5145ea98e0341b2633ce1a458b37e0ffcd781910ef0bbfd357301a2bee2dedf1a448afedd36202b8ddd0d60f49f3a16aeefa5a4867ac3c6b0624c22a8797742b255e7217f9722f7b638b102121738758599f2985f87260b58d5b58103550f7a19aa637f493d2b5cd84b9efe69ef3a4de5c4899f481406c630a601f2f08e902c4f32fdbcd42ed46ddbd9eb4d61eec897e7178966c337d69534a87f1d3046df299323de39d3e14f1ca9ec564870266a2bb2f0e9e9a2a1e081ce55ee4251250d646676aa6cc2a5b595b1201ff099fdbf84769ea8845be630f12d1701dd920b953e9992f888cecc8e59b12d07887aac438f9408c629ca2a1213b1ed5ee26e3dd53a23ba71cb5daa5d390cc5eee8609fec2bb776fd7f0b60b78b9fac00b3aeda5f32aaa5c95a35ba64247578cae7fa650ea254260f78408a75ecf2b605cdba8d6315c02c72cd43e5f1d0368a8ac85347fa3eb37f20171c26da7f08528e011a8e2dede6463678c35d30fddeff62f5b498308317d37872225c99b159b86b60a78d7b3d48be9c458bfc3b1a817166f00edb272e1a7f1a9e2a932d87dc6665c666331ad508f7d5941d3ced0ed38d0366f48804e0581f999b1d2e91ff0c36016aa84205767d21ba7413fcc668ebd6098da6338223fde7eff7b02b6f3518f76ce25fa82621d008a4819230d09aefd57a42734248effbcfcc3ec5c23a196327f39da8a48d1c68e122ca5d2fb9830f790314a3938a2125c6609548035b4227706dc59ef80252be3533718af9dd02fdbed003610a99254bdc49c6cb60acd77f29e69ce804d720289f1a81f90fe8fe540889a1f08dced3e269b6bc2eeabaec944d1efe2261e3ee00f4cdf9b477fd281b29d19adaa0cd61c3a705ff353b453f26377c6b62d14c1424100ac4a184008825bba5a2c0cd3ca5a48c85899213e3c3965bd6de821f45ebe0147b4404ac372915bebc0bcc52c8f31c7ff1f94972edff2f045ca2d3dd3aae84e7c078a4b6e62e7a9eaee762a9204de5635cfcfa4a6ddfc60324fec1cc5b0cbf1b5cbf83bbf8c09d5bf5536dfa364b9e9f731c0a1bb789a7899534b6c5318f3e78c629e6286a13ad70a8f005577a67cabed3ec9297330e1695d2b756ca54dbd5325120229d79c110607bfeff30111b0c8db5a8cd39709b2a5821da9744ae869224857bf80033d605c177b6414345bce1e4b3b4d52c76a3eb73b7fa3161cbe3053a3669a1fbd4f792288e131d75669903e8626d0db06f6ce0748bf898209f8ba3099dc2073df508f9c077dba64d7bb5d0a269355ed28b75bac8887aed6c4b1edbdd4c7e37b8111aad584b21b1af188c70e8750c76c8c5ca45a8e0c4a49d17aadbb7159cea0d5550446d2a31f540deed4f1d34c84b4150fe2beff6c62823915547a1736e04017c2b035c7d673273ed004800ea357d8524e79ca3e1b75ca198dedb7a8253e95dce7da30a517468b8b3891cee6c1ef6c28e365ea379af54e20530420c77cafbfddce44981f9c204f6b8d1f4200789cfdab04db1498b98643f3c4cbc6cd43025124ea8652ff3c5262058590e02460b43889c7b0e74832128d9726028221ab4e9d0a2d83e520992eb5da1fbe96c4a3990c4e48359618b5be122aa0f5fb18765c5f76d8e9ad3c9f8790ec5214fe5b7b14136339660b40dd04f392a128a31d8d8f6d8833d27233fac6c94b47216bfabb924d19ec919b9857407f9a314aafef817e0e8d1b6488018a762bb9d040852f640514bbc230b15f47070d10ba13ca6263aa201b120133d9b8d9393c844e5ca0f8293fddc8e86830c0bc42f0c33c6f37a7dd31cde5158470db005f468ed5c704b85dc54e65657968af5d9e0da4b2e7ed90f424ec666897539201b1696385705455a83c665f7847e26b0178e0761176bb5475333b58a250133d7f70aa0ff5b5e9bce7eade12618dbc8ac5d91f6e1b0d3340cfa3301fb0d9dd228a46cff89b85bd7153dfb2403af228c619d3e38d8c0abbf4df9e13835fa7acc8cf02648f0bf9cdcbd1a150b7dd5fbbf8a2aa78dc4cc3d268409c79d78415d43b25868b9996e3c1007f81ac2432bf06f068ddc28fd03885a20b50ee4740eab1696ec42c84d28efa03ca5f683f4475006190fcfbd1b99b4418e843ceb6f3f3051677f51bf9154640a68e9d81951a5384bfb78c55944e3f980e42303aad80bcaea6ba1cb0afab059bc04b49e1627cc81bead4e8d37204ba1f3f76e09e8b6103da9ff00b3bf2063370745830e953895677ea5b4f4e150ab8669d82b044b60363b227e0b98c8984b4f846e7977db8bc0e23b444b9362e2d670ac9a7bf8abe29067b4222dc3b2107706ac4eae568ae1e6102330b9b78c64a05cd0f486063fdf9ede567a13d47bc4302d43ba0eac17c49959d43c518dd3c8fbc90ce24b59463f6825cf6068e3aa9ca746a58d845e8be7a27b5c5fc47a00aaeda5201560bbd02d2c4b1f889d6c7a4efe682b524ae5bb318886ab35b8a9984c880eaa5e56f0b5ea5df2cbf43f0ed1718237e4e282629ee8d2ef323648fa50ada7b58dfc8445c9126a485c1bc2fd7f8019d9ecd19159cbba11aa1d33b3b8a5058bed555fe112214cec8d77c47e174d58359aeaacb85b11dc9f074214b2e4a950f64eb5ba4349654cc900c063e4ec67d3ce27261b1e5dc1c9286970fed6713eb6a200eeea2f9ee5cc86865cb7a3b2e2513d2a5fd75f84b3efc9b26412022c6063217339e5c00d1e022d4f7ccfd2c456cd6eb5de40cff7cd4d08bc1542d45037750f788ec2f9e801ad9e3231eddb27ff5e54182493398a9c493dea37476a9e74543248bef0df1a8f0d09b6820bf7de20df2771ab58efef8f19547146b6af0667e2ea64ea702023f02fe19967979aa707d847f1af03d39c12a703e0292f42943d9af343a75ae884e3a5cbffc706a04d6e8fc893e2780fb1831844d62c635b02095f83e75aac0c140bbadb6f1c13637f7179ff430809d9d1ac03dd56f8826001984b591ab103a113acae6ff7f4f842b9f8a5a669d3d78bbc3df729d22440a72979c7737841f030a486085f4fbc77c56415ad0c0196c387eab24a28e311afaea8ed9bb10b2af99d8bd17d00ce03b5e8f7406cebf02eaf4f0ff99d8fdf86e0f027ea78e95e4929e4e0630ef651ec5cf4e201808ab4828687ada79e2f7866900182bf679672163a72095df265c990f754128d4af85ea97a4abab285576200c6c45624e46c43eb5d52e557d659a3acf6da80486038756db98425626923f22b28224ebc1ec9a9f42fc339a6d2b35da506cd06083a38feea53556f588b1014fcc422548f9d92f11997a7983249cd8e66982d1af36455bcd040394b449fc6982c36abee17a855b5891e625b03ddba309fb01c462c4de9082002c65e49aee0f3333548e15535b9221606fab4e2733da60090e3be839a61144895da82da3e17589685beb97dfb4a4e7cd02aa1d154fc5d7480f4c90a940e226eaf4425b99f1e128fe5cd533b64c59732b59369ddea9c10337d6a361ab376db31f5990c39c17d30525aa97e25e5d337fefcb0b2f15932062957c18f8d6829a660ba7a94c4cdc6568446cd80f458028cb9a3051c06ad7acc54b10aacd81002ae44349fe784d72f608302fc38913ee7ccd18d595596fb6c522b1f22c96b10062cffc53946acfb754bb1459fbb2c330e9728253e4ec1f49d91c2cf9910302841fe1f62f345807b9f9a49675a573b4b31b2d76e2629ae260b82a7c5157674f0f2cc817276af6bc2d2dc7a55dc74d4a957bb5a6ad78c0fc02f0ac34f510f1f7b288efa04459a963cb8726b171732663957afed49e813836f1572836979dc45b67abf35a5d4ecea452596be057ce14d952496b65d66366d4205c753ecf2a842351c1ff6b367609cb8eb2a4ae7ebbdeb334a27f7eaacce156f0f937082f2e555e3e356834a57deea17f65b3e63b6526c1cfa5c61319b3e604884ffec82cca39fa4bcce8555962d1501f5ce092548329b30bd8ae95c05a403621670edd9293106115a8ffc3747cec5833f2cab6c9e9bad0a201d82eeaa85d3d25235bf8d07b395cc8f8ae4549d7d453186b7c4048f71b2cf09b793a859a0c4fac28dca686960990365dc9dca3f3231bd7ee26a89fae2fd484a8108fa78c87b69df8f29b2953a7f5614bb1bef34b0218c912aaceb2a3cade05cb0c37b90145021cd3d895832a50af3cc89b312a5ce7fdb5b89de061b033fe37af053c9668f724b9ef1f59934bfa977951913e3c6d0ba57a7da076ad07f06a46dfef3301afa3a3ee24c0aea57efa715237122de44bca3fe5f5dc77c5cf29b750ed7e87495ac54336a0d4333db4cbcd09e9b366585369494b3f7ce23a3b3c736eb68d5972382c6dc67e7b5b30027f2ee01e5b8f8917f62c5ab7644ea5ab65d062ce647905f5a94b9c3849ebf325349b9cd03c3231dd083702fdaa8876eeba15d46c3fa1cc8f0ae25abf9d56a4a00af109a2dcc94a95b2b741b19a4c741756fd0399ef9ad94538df4ad2509a1c300287744606146588229d65540b9232bc7195e373d85bff8cc57b502146fc2ab7ae86e92eb11704386856ec0220bf0bedeeca4c16c5238cbd58b2729f052131ab6e7f8107d630c54233ef7318cc90664c1a5437d92ca71b71b142b0dbcf7e5349f31f91562f81630fbf3205f5db5b28a15a0bbe5c12d3e972e3f5d651ddc44319ab326b1f0e1e459d09b1fa52ca300c2061a140c8135ffe23201a9c524e7c441c351bc12b6a103a61f7ab78aba93f45a4595151efa9b4d4fc42cef70e41aa48f0da355c6731f08888763b97e36c501f403137ec0c5dac78e92dd3f8b2572b38976c7618b2c7b32db9b1c713d167c98af2db403db308bd5748d9cf4e169f3b4f1454d4e7e28e8a6fd3a4f399c07b7180a86936c3f53cf4a18799bc049fda82cc5c6f8cf030710fa0ca1b8007183ac2d459a783c3137fab7de9bc67de1ccd73d967204120083796b53543a3388c8f6539231803d100d7076e88fdb54886369b108f9ecc6642402c50a697c137af134f7d8dc858761bd0c6614ce3ff691b29ba783108e4872a53f5798992b2c904df939e957b09ca38d0a858f060231ab09f7f50c8761b64d0a34093e62cb5d7ac53b24d6fde8c39e5ae23864b787266df689fa8685d56022bc970f40feb4787f39e80108b1a8425243a6f2c23ab87d8194171bb1e2355308bf54b4174a78fa6b844983977ed30b7427738aa55cfc684970214a71d5e1de376251bceb08b3bb3d65359e47439e9672f308e49a45157964013df0045cd255b2f4f9474a08396e67f8ca39383740ab51c168e0e288d81f9b43fb1bc0ff1d0ad22e54128dd7ec3d734408d7227a4d2adea382e7bcb815b58a23d1f391f0f0c178fcf43e58d81e15de10c1f835accbdeefbcb9e4e20e9cfc689076fabc42fa205273adfbbc5c2a04e9dc3b2000b099cd00f3deca14cfc1b08d29d9593f463142dba34ea8ec5b8077d06b1e90e3e9c11c6558015d6d12e466c36803df5ebc1c64484063a828f186dce83a6caac46474bab50cb6cf57e43b2b9a33d19d11e8c1e80bcedfdd3bf754b093b45d41f07bbc53cb09e703c9d913429f748dbe8d4bace6637e05d7ee28da901068886170c6ec19f7308ab3788482a4ff6392448f5750efb0b7d1c63d0c6121c27c3609e7c3d34d873652ec1f79245b64453c288b19d166f45a9cf49b12e6a756d36a1d2879bf320d06cd1a9c7d6b6303756dab69cf9f43d0ead9e0b5ec4e6c063f1031be80975c4c429194b84c514b2c8e5a0c3bb68502581aeed7a4d3f8977eeb53e416ffeb1c1c279a1913acdafb64ee00195a81e66a0c252cf1574d175f1d8919d0bab780e568277addbeb28f8200fcaef417d637cdc06e8017d7e054bb052313da1b082be2db2b267c19ef02f9595831af92cb2f71cd4761e8033b34e9c87b722a4d5f3dd8df5730c2aba24448b00c811164648adc447e31860bd9597639be502e06ef736fc6adf9cc0a9657826562822b2b05d940d25cadee9a2de414623e1f78841a67417385824f9b102110d34054ee3bba23903d2a0d7f5f35a2f33251c4291d82563cffbf3d9e77e47668eafae4e8251f52c1d05407f93e80b8c24b1cf2e571d9af313cf2868fd6b2e9490071bea629cda497c6706112ff801c34b05aa2d30ac47c4cff3af03c4323a69c9c3a34df575f89bd9a0a371fbd7eac4983f35220c9148b2890a48c225df55985c6741fefae8e3c894448f848bd329515e3eccf0188020b096b728845b8c686d248647e8eb47025dc70630da360b55c69df013ca816e2877376694ba2115f324adbfd29cf4861c1040ca1833ad616e95a53824b2a73f6ee0cc2059ff58d6e71fa89cf8539eed5353fb712ec412e7f99d20c642e039b5751248ef7560b755bd1e0be2af493066f5c78eb4ee797ae14d0f91349b69b2866ecfd98400d00795129b150c742f6c22f6ffa2b953599b069c5eb2e3e4c15c67af597313557011bc4313a949f2517a5c2378dfc478353f4823ef2889f602e5b9260c99f0f4e2106907b97ca85ad098a1e710247c1d1a4451fa49144276300559ff8fb78fcd86b68b29beb214381b4572b32268c584920d7f73134850c7eef14cfa945c48fd1d58ed578c375742b81036597d1a36b2efa74579b00cd91d90ffc2982758bc65917371abd6a7e30582a994cea936ba0359d1bf36658dd152c6b32a0c820de0f847be3622a019e8a95301a3df11c9b977f3b07401e2f4b5a47d8a47127527298f153ef7b4b00380aeec8a72a8f6783922cde6724097d5f389aaf9f9aed8a46f14160d203b390908cad3d48d6879cf29de5b37c44d0aaa26b39dac103816aa6a281daa4316f66d40ff596249bdb23d75e2cb69f60b8c122c7433d99ba248139576e66269b3a0d33b731813160cd91f496f1f6c2242b8e701609dfb2ac204eee881b9c114a959cb94b7b7e196860f0db469d6ec51fc5096b9ba15bec922bcd907c1e64742fc6ac1bd1694b664a334c98fafde2df4edd1790870af05a360d5dd7e7ccaf9a2ab96bc04a10746c5bed1b7c850d5e6d563051c57479beda017e3ecf88a443374fa773ba9401a375a0d2b4ae1d7c7d09662923c9321311a30791fe961036abc1209580842005a037ed54da6c1f40ed53586b29f098fb64356d8e590e42d5f6b55622a18fed6454fc183ef1524a2b67e3f452577342e16c9fd94d805576118e65596d745c9c81de0be8aed935b8964d0adfc03777a17121b2d34b0236d98bbb5fd671da5b8c19e77d9ec2d86436faaaffc4c702da78d81967b80828dc76a9df532b17b30ccf95bef9c6d9feb12fca738c154df7cf2bacd5f8fe620b08686253698b6d972dfbddfd9fbddf0b5f86968f9b2f9b35252ca59fe672d7d25d4f4b789c09fd86174a4b0c2e4829f3891ff02868f1c1deae504ec356a0f6471f38f0580ad317e17fa76d6b7025e9e679a739f275a7f732c3dd5c9bcd9f9f3a8d4ddb8aad326923dc345e707a81a47436452b32feae0ea7a280394bf528a415406d97361c16a467cd5202ab9abb51e1f71bdd5c23f2a0a5df5a0e6ee6c1425af8beee42a84406ddd557d2fcdfa2b9fdf914bebff870af85691d0d69e7a3c34b0c1652100cfbfd67944d4d1b925fc18e2c016faf10aa522be6138f228fba4e5761b52c3e5d7d2f22a6446f1d742772a5c21ecd7047782705d040f1b5bad6ec180feb4222205425638ca5e9d673eff66576970af329ddbf36d24c96c59fbb969b6848cac338a9c75ce5397f035165950e9a50d68edbb1251cc6aa4530194600021e0debae1f34079b431df406fd01b9cf27c37ef2c1dcc7fecef2942d4ee9a74567f21bbc0281448afc65a9da7f6ec9d3dbd1f2c115aaaf7b77643e2bb3fca60a70456288cb5265dbca84cb241e580c3e847b65ea0d8c113178f5485dce65d016e9fb16e66bf3fd812b263b07fc9d22780c4a77eb9d2966ae3e3c88a84da5cdb42a45f671eab3393998042e5c11e6f0e0c0fbe116ae15b4295214757049857c27d906b88cfe6a8fa0f303a0088227c1b2858798648da20a2314053c027ddad2d3d88bceda8d3f7d65a6686ff05faf2926e968eff05c78a98ee0e6a7f8293d2fa8f044e0a18d76766c752bd4e4641e5bd557440c8737f413abd705e672f5db3537887512c4046ae546bb01ae34d5737019de1211a3463ab78cd3e7caa0a5422f49fcd98f6f1caa64ff252fc76f73cdba9a1c1edf0c8f890e46c3b82662d20ddc1db1b6d2b1c286f4b2ad4cf0b25cdf3d99ec30d1ca8418db449000b66289dd383f5645b1f6ace5d188195fd9ec189007c3f5215682c10e3b342fe78a63d9385b7c32de447257c24c24365b3207698eea959a423c9feb96b68ceba9a37b436f03257c310bd2f0929db5b9e8c1be195a7a254f008c07457711a63f1b7f4cac944c8e7fdad50577b49ae2f0f65b95aeea1b733de8b8145f69dd9c48ade930afe4244748f43169b03ca85419eb1eb7cf5c3707416cbe8351da2271741dc2fb1d848059dcded18e3ff1bd9586bd7a9682d452616527bc392a5633752fbcf10380044992d814dabf18e70d95710af51466a79ec1e7f7704b684920c4fd7c51a4ae2cdc5e15e938a071c9e9fc42cb4a8f63131bd0f7e8f397d7be49d828ec100f28fa6060f9c27eb23ad66d1c90f005ba8aa0284f8cda9437321206d810e72ed780df3a97e3d63c56a987d79f30d83cc8847d778947c4d320f8b1d3d85422f934ba54f4a88cc04867b5c2fc5b1a4c4701769b8d828a5c763f267ef58635dc5acceb8e302be9927b4a63fd70bd0803a272b45863413ce6cdf5014940e94fca25b5893e27fdc50bba150946da642c335d855ed849e9ef8b6bf6b2193fc07b7e6b22b9ae3df231d8016f25a9c9d31eb4caa27f5f816ab4a91000e10d9fa5b426fdd212a23063515f8e27c2810a459834f0a5eef54a0db6cddce648586d49d616c56672453e5a7d9a67dfb7edc42388afce284725cace05a53e44c2c7b65d8afcbe4b2622162da536d285a3cd6177855d087feb6a453ba8dba507fd37c9728052406bdbd7813f0ddc34d3974bb3c091a1f6b9d852a1249fa2601af3b011d904d03879e5517b627119b24c7e65f60565e44e72220c02fe0561dfe1fb9206e326df40d80297e3d83dbc50a861a6f8fed6e1772ba389d5a9d8fb735db0bada8136427488117bb6fb84be7353f5b51297dddb4973e24e2dd62f7cf27158736068248e69f7a023fdf0b84cf11ef4ba33c3a3e20363f67cd9a8174cc2b1c731343df9920d2e8ab58db8fc694d8e641180c5c054bb316a5eddef9b4f9e2b3040bf0d87b864eb29114f97bedd5d1be00cb7081a55cb55f089e25b47694e0b429f4ffbdb7089c82ebfdd353fa356caca419bb9b02f9388f5f4881f7f6976d99177008a01df90d5e8303742162bfb1fe6746bc869ec7ab24747043cb91205131116e64088fae46d1bf7ee9d7314964adc216e560a870f576c24d49b8c1e2fad025c046498d33f4a7152a827f63b41843a58582c23080e65b1dd007ed59511df02aab8d8504e7cbef2a153c45beb5054e067904642beb0a1681bfe10aea3cbd7f0ca740d38b5e536bf0bbcfb0c6fdf88b268e0707662a016a0279386037086116c97722941d915b4b8beb75f31a0a60c15ba0e1ec4420ab98dbcbbac4dca49ccd77baf6febd2cf42d3b34b21dec59c938f74cf011de86bfc70d2fba4d60b729bb36c18ba388ecdb6429e9f0fa87ff354417977618efbc0ffc8a6836ccef78cd107227055e0bca8440dc24cbe1e67dec7c3599652ee03ce161c6784e63b2c15b9723b2b7d7be7d8fc0d333330e7d3023b172cdae51523fc9bfe23e32a6fb796c159472d7a48ce94c7f9e64328c8d9038d887315907369cd359d9beb1af2c24b5a7b4b0002432aaa600c4bf890f2445b55f7e904866615c72a9346f3eebb4cf1e30ed5f07ac887197fb68482ebdcda4353554f793b2097fe8b1ac92dac011d58133261440767c7fd07a9818ad3c67b677dab7fd190aa0c178e4ded5f3386a478fa76319237a223f087b00e2786f3dc52e3d08b6e259dfe24ed081075a5c3078dddff2758b612364cd70b23e1d828c722f68e3750942c2d7a46cb3531fdae80e07389f21e10914d9072bdc2c8d0a99b3318ba3ecba114e48e049cdaed5214f6e2c8f5ed87bd1573b4a86091f98fa2f318e152c13c9efba9599d9828c95a9a5cb3a5dcbcd8fbc2999aae5116e3c28d9a837511eebba632689051de3feeff3aea6c3de163f3716c5aa44e10a2f8d7786a9b28a2bace27bce64aa552d420a2a9795c137037f37dc2d3b3f73a98a3a92b20244e6807e132d6c4ed884d480032ec640222a422b10d6bef2f4ca41050b4d459bff491236990915f4ee3048b69365152e2ac0d694ee8f5ea9636a75b44bbc181050059d617741d24de7717037a7fbbbea2ce3ee284d4fdb242322e628e235ee98d3679f58359ac651a76d176146b5945206ba92eb0f9e242b16368892fed08a54977b081812f89e3279195d91607cc5d66ffe21b160bac845ae6958004851b75f0c2c93ce410942d445a51d44d46a3bad2159d6a2183f52a9dc29414798cb1d73b44480d9b5285687cd74c27dc791f2d1e6e1010af4b3f2</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-up">
      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-up">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工作记录</category>
      </categories>
      <tags>
        <tag>节点模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>Revit快速上手（4）--机电</title>
    <url>/2021/022552444.html</url>
    <content><![CDATA[<p align="center"><font size=4>---摘要：Revit纯新手快速上手-机电上手---</font></p>
<a id="more"></a>

<h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>建筑结构专业使用Revit，上手很简单</p>
<p>建筑专业不说了，三维软件多少都得玩儿，SU啊，犀牛啊，ArchiCAD</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228153721.png" width = "600" height = "" alt="20210228153721" align=center />

<p>结构专业一般的结构体系不会很复杂，构件种类无非是梁板柱墙，形状规整（钢结构另说，那个也不用Revit）</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228153917.png" width = "600" height = "" alt="20210228153917" align=center />

<p>然而到水暖电三个专业就麻烦很多，管道，设备，管件，连接，各种仪表，电气专业的各种末端，林林总总</p>
<p>这个上手就有一定难度了，值得单独写</p>
<h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>那就先从管道开始</p>
<p>在Revit中，管道-桥架-风管，都被认为是<strong>基于线绘制</strong>的特殊族</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228154809.png" width = "600" height = "" alt="20210228154809" align=center />

<p>点击<strong>管道</strong>，平面上画线就能生成管道</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228154634.png" width = "300" height = "" alt="20210228154634" align=center />

<p>我们关注的信息在“属性”栏均有体现</p>
<h2 id="管道类型"><a href="#管道类型" class="headerlink" title="管道类型"></a>管道类型</h2><p>这其中常常需要调整的就是<strong>管道类型</strong></p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228155110.png" width = "300" height = "" alt="20210228155110" align=center />

<p>属性栏点击<strong>编辑类型</strong>，可以看到是一个<strong>族属性</strong>的界面</p>
<p>点击<strong>布管系统配置</strong></p>
<p>有管段材质，连接件，末端等设置</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228155247.png" width = "300" height = "" alt="20210228155247" align=center />

<p>这部分就和设计说明里的管材-连接一个意思</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228155625.png" width = "600" height = "" alt="20210228155625" align=center />

<p><strong>管道类型应尽可能规范下来，保证模型一致性</strong></p>
<pre><code>桥架、风管也有类似类型设置
</code></pre>
<h2 id="系统类型"><a href="#系统类型" class="headerlink" title="系统类型"></a>系统类型</h2><p><strong>系统类型</strong>之前讲视图控制的文章中有提到</p>
<p>这个概念很好理解，同样的镀锌钢管，有的是给水管，有的是消防管，还是要用颜色区分一下的</p>
<h2 id="坡度"><a href="#坡度" class="headerlink" title="坡度"></a>坡度</h2><p>刚绘制时常常被忽略的参数</p>
<p>水平管是不能被很好的转成坡度管的</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228162258.png" width = "600" height = "" alt="20210228162258" align=center />

<p>因为一根管两端高度变化，相连管高度应该随之变化吗，需要维持坡度吗，还是应该断开</p>
<p>因此Revit中水平管高度总是同升同降</p>
<p>但是仅支持两端没有连接的管道更改坡度</p>
<p>我们需要在绘制的时候就按坡度绘制，避免<strong>重画</strong>！！</p>
<p>坡度管按坡度从高到低，或者从低到高绘制</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/绘制坡度管.gif" width = "600" height = "" alt="绘制坡度管" align=center />

<p>尽可能一次绘制完主管</p>
<p>支管和主管连接要考虑高度问题</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228174736.png" width = "300" height = "" alt="20210228174736" align=center />

<p>这样是连接不上的</p>
<p>正确方法是使用上面的GIF里的操作</p>
<p>绘制时点击<strong>继承高程</strong>，然后从主管往外绘制，这样保证了新管道绘制的起点主管在这一点的高度</p>
<p>避免了新绘制管道与原有管道错开</p>
<h2 id="管件"><a href="#管件" class="headerlink" title="管件"></a>管件</h2><p>风管，水管，桥架都有管件</p>
<p>相信你已经知道选中管件，旁边的“+”号点击一下就会多一个支路（当然最多也就四通）</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228184413.png" width = "300" height = "" alt="20210228184413" align=center />

<h2 id="设备连接管道"><a href="#设备连接管道" class="headerlink" title="设备连接管道"></a>设备连接管道</h2><p>消火栓箱为例</p>
<p>连接到管道的设备会明显的变色</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228185318.png" width = "300" height = "" alt="20210228185318" align=center />

<p>连接的方式有几种</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228185529.png" width = "300" height = "" alt="20210228185529" align=center />

<p>可以点+号从设备建立管道</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228185856.png" width = "600" height = "" alt="20210228185856" align=center />

<p>也可以使用<strong>连接到</strong>命令</p>
<h1 id="风管"><a href="#风管" class="headerlink" title="风管"></a>风管</h1><p>风管的绘制与水管没有本质区别</p>
<p>连接方式则多种多样</p>
<p>导致连接件形状多样</p>
<p>偏心的，顶平底平的，插接的，来回弯</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228181040.png" width = "300" height = "" alt="20210228181040" align=center />

<p>而偏偏风管尺寸往往不小，形状上不精确</p>
<p>后面安装就很可能会遇到问题</p>
<p>这种时候就需要有好用的族</p>
<p>先绘制好管道，调整高度对齐，选择合适的族，将管道与管件连接</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/风管连接.gif" width = "" height = "" alt="风管连接" align=center />

<p>当然，插件上会有更好用的一键连接，比如鸿业，以后可能专门测一下哪家好用写篇文章，这里就不写了，插件迭代速度快，时效性不强</p>
<h1 id="电气"><a href="#电气" class="headerlink" title="电气"></a>电气</h1><p>电气基本在施工图阶段，画电气设备与桥架这两样东西</p>
<p>都还比较好处理</p>
<p>电气末端，线管，导线繁多，又主要由精装人员控制，建模一般不需要电气设计师</p>
<p>但是相应的，电气所需要的系统图Revit没有办法很智能的生成，目前三维软件干二维的活效率最多和二维打平</p>
<hr>
<p>机电上手需要的基本就在这儿，溜了XDM</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228183903.png" width = "300" height = "" alt="20210228183903" align=center />
]]></content>
      <categories>
        <category>正向设计合集</category>
      </categories>
      <tags>
        <tag>Revit</tag>
        <tag>软件操作</tag>
        <tag>水暖电</tag>
        <tag>管道，设备</tag>
      </tags>
  </entry>
  <entry>
    <title>Revit快速上手（3）--视图控制</title>
    <url>/2021/022528936.html</url>
    <content><![CDATA[<p align="center"><font size=4>---摘要：Revit纯新手快速上手-视图控制---</font></p>
<a id="more"></a>

<h1 id="上手的障碍"><a href="#上手的障碍" class="headerlink" title="上手的障碍"></a>上手的障碍</h1><p>开始建模上手的时候，总会出现：看不到xxx了，怎么关掉xxx，我能在这里看到xxx在那里看不到，图里的xxx重叠了诸如此类的麻烦</p>
<p>由于Revit会将所有要用的元素集合起来，如果不加控制，那么：</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225192513.png" width = "600" height = "" alt="20210225192513" align=center />

<p>啊，这~~~ 地铁、老人、手机.jpg，就这还没建筑结构模型的遮挡</p>
<h1 id="可见性设置"><a href="#可见性设置" class="headerlink" title="可见性设置"></a>可见性设置</h1><p>CAD是如何处理这种情况的呢</p>
<p>装饰装修设计用布局来画图，将总模型中不需要的部分隐掉，每个“窗口”只展示需要的部分</p>
<p>ok，思路来了，我们选择性的隐掉部分构件，快捷键vv</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225202926.png" width = "300" height = "" alt="20210225202926" align=center />

<p>关掉不需要的族类别，比如上图这样</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225202436.png" width = "600" height = "" alt="20210225202436" align=center />

<p>不同专业设置好了之后，就如上图</p>
<h1 id="视图样板"><a href="#视图样板" class="headerlink" title="视图样板"></a>视图样板</h1><p>每次新开一个视图，都需要重新设置吗？</p>
<p>并不是，关于视图可见性的设置可以从本视图保存为视图样板，其他视图可以使用</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225204230.png" width = "600" height = "" alt="20210225204230" align=center />

<p>点击空白处，左边的属性栏会显示视图属性，挑选已有的视图样板</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225204359.png" width = "600" height = "" alt="20210225204359" align=center />

<p>实际上，应当在<strong>正向设计当中逐步建立起每个专业的通用样板</strong></p>
<p>就像在CAD当中会有规范的图层，保证出图一致性</p>
<p><font size=2>tips:</p>
<p>建立视图的常用方法</p>
<ul>
<li><p>从标高建立</p>
</li>
<li><p>画剖面（立面）</p>
</li>
<li><p>复制已有的视图</p>
</li>
</ul>
</font>

<h1 id="机电–过滤器"><a href="#机电–过滤器" class="headerlink" title="机电–过滤器"></a>机电–过滤器</h1><p>上面的设想似乎很完美，然而<strong>水暖电设计师</strong>有话说：</p>
<p>啊，你这模型可见性设置只能隐掉特定类型的族</p>
<p>那我这给水，排水都是水管</p>
<p>排烟，排风都是风管</p>
<p>强电，弱电都是桥架</p>
<p>怎么办？</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225205118.png" width = "300" height = "" alt="20210225205118" align=center />

<p>不要急，不要慌，开发人员知道你们<del>事儿多</del>啊不是，很辛苦</p>
<p>所以他专门设计了对标图层管理器的神器：<strong>系统类型</strong>与<strong>过滤器</strong></p>
<p>首先是，<strong>系统类型</strong></p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225205547.png" width = "600" height = "" alt="20210225205547" align=center />

<p>点开一根管道，我们会发现左侧属性栏中有这个参数，下拉你就可以选择不同类型的管道</p>
<p>管道的类型决定了它的颜色，多种管道在一起也很好分辨</p>
<p>那如果我只想看到给水管道怎么办呢，让我们再次按下vv，找到<strong>过滤器</strong></p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225210028.png" width = "600" height = "" alt="20210225210028" align=center />

<p>把不想要的管道类型统统关掉</p>
<p>没有我想要关的怎么办，看到那个添加按钮了没有，点击添加，非常的人性化</p>
<p>怎么样，是不是可以解决我想看某一个系统的需求了</p>
<h1 id="隐藏、临时隐藏与隔离"><a href="#隐藏、临时隐藏与隔离" class="headerlink" title="隐藏、临时隐藏与隔离"></a>隐藏、临时隐藏与隔离</h1><p>那我还是不满意，比如说我就是不想看到某一类特定的消火栓箱，或者某一个区域的所有管道我想隐掉，或者我只想看到这面墙，怎么做？</p>
<p>当然可以实现，这就要说到<strong>隐藏图元</strong>和<strong>临时隐藏</strong>以及<strong>隔离图元</strong></p>
<h2 id="隐藏图元"><a href="#隐藏图元" class="headerlink" title="隐藏图元"></a>隐藏图元</h2><p>隐藏就隐藏，为什么要分临时不临时</p>
<p>是这样的，隐藏图元之后就看不到了，没有提示，可能会造成误导，重复绘制</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226094707.png" width = "600" height = "" alt="20210226094707" align=center />

<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226094833.png" width = "600" height = "" alt="20210226094833" align=center />

<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226094901.png" width = "600" height = "" alt="20210226094901" align=center />

<p>所以隐藏图元功能（EH），常常是在出图时候调整图面使用的，或者管综时候关掉某些不需要的族</p>
<p>恢复的方法：底边栏的小灯泡打开可以看到隐藏的图元，右键点击你要恢复的图元，有取消隐藏的选项</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226103816.png" width = "600" height = "" alt="20210226103816" align=center />

<p>实际上不太好选中</p>
<h2 id="临时隐藏和隔离图元"><a href="#临时隐藏和隔离图元" class="headerlink" title="临时隐藏和隔离图元"></a>临时隐藏和隔离图元</h2><p>而平时用的更多的是临时隐藏（HH）和隔离（HI)</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226104254.png" width = "600" height = "" alt="20210226104254" align=center />

<p>选中构件，底边栏眼镜图标有相关选项</p>
<p>逻辑和CAD的图层隐藏，隔离相似</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226104434.png" width = "600" height = "" alt="20210226104434" align=center />

<p>临时隐藏/隔离会有明显的状态提示，而且当你重新打开文件，临时隐藏/隔离都会消失，很难造成误导</p>
<p>不需要隐藏的时候找到眼镜图标“重设临时隐藏”就好</p>
<ul>
<li>技巧：</li>
</ul>
<p>选中一个物体，快捷键SA，可以选中项目中所有同类的族/模型组，配合临时隐藏/隔离非常好用</p>
<h1 id="剖面框"><a href="#剖面框" class="headerlink" title="剖面框"></a>剖面框</h1><p>好了，相信以上的功能已经足够大家琢磨一段时间了，最后一个关于视图控制的功能–剖面框</p>
<p>常见又很好理解的功能，不过绘制时候可能用的不多，管综时候经常用</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/剖面框使用.gif" width = "600" height = "" alt="剖面框使用" align=center />

<p>挂个GIF，点击三维视图，左边属性栏中“剖面框”打钩，你就会得到剖面框，调整就能达到只看某层/看看剖面的目的</p>
]]></content>
      <categories>
        <category>正向设计合集</category>
      </categories>
      <tags>
        <tag>Revit</tag>
        <tag>软件操作</tag>
        <tag>视图控制</tag>
      </tags>
  </entry>
  <entry>
    <title>Revit快速上手（2）--必须学习的10个操作</title>
    <url>/2021/022657324.html</url>
    <content><![CDATA[<p align="center"><font size=4>---摘要：Revit纯新手快速上手-基本操作---</font></p>
<a id="more"></a>

<h1 id="链接CAD"><a href="#链接CAD" class="headerlink" title="链接CAD"></a>链接CAD</h1><p>CAD图纸大的好几十兆，一股脑链接可不行，需要前处理</p>
<p><font color=red><strong>删掉不需要的部分</strong></font></p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226153830.png" width = "600" height = "" alt="20210226153830" align=center />

<p>仅保留你想在这一层看到的部分</p>
<p>图框，填充删掉</p>
<p><font color=red><strong>炸开图块保存t3</strong></font></p>
<p>轴网底图之类的图块最好炸开</p>
<p>保存t3格式防止不识别</p>
<p>最好将所有参考图纸放在一个文件夹（转交给其他人的时候方便）</p>
<p><font color=red><strong>链接设置</strong></font></p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226154843.png" width = "600" height = "" alt="20210226154843" align=center />

<ul>
<li><input disabled="" type="checkbox"> 仅当前视图：勾上，这样它就不会出现在别的视图干扰你</li>
</ul>
<p>导入单位：设为毫米，有时候会自动检测不成功</p>
<p>定位：如果CAD原点和Revit基点差距过大，可以使用手动定位</p>
<h1 id="调整界面颜色"><a href="#调整界面颜色" class="headerlink" title="调整界面颜色"></a>调整界面颜色</h1><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226155353.png" width = "300" height = "" alt="20210226155353" align=center />

<p>文件–→选项–→图形</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226155513.png" width = "600" height = "" alt="20210226155513" align=center />

<p>深色背景下线条更容易看清</p>
<h1 id="调整画面精度和渲染模式"><a href="#调整画面精度和渲染模式" class="headerlink" title="调整画面精度和渲染模式"></a>调整画面精度和渲染模式</h1><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226161544.png" width = "600" height = "" alt="20210226161544" align=center />

<p>底边栏左下角可调整</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226161657.png" width = "300" height = "" alt="20210226161657" align=center />

<p>旁边调整显示模式，画图时调成<strong>着色</strong></p>
<h1 id="调整细线"><a href="#调整细线" class="headerlink" title="调整细线"></a>调整细线</h1><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226160104.png" width = "300" height = "" alt="20210226160104" align=center />

<p>绘制的时候一般不看线宽，调整为细线</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226160248.png" width = "600" height = "" alt="20210226160248" align=center />

<p>点这里即可</p>
<h1 id="选取–过滤器"><a href="#选取–过滤器" class="headerlink" title="选取–过滤器"></a>选取–过滤器</h1><p>当我想删掉视图中所有的参考线就要先选中所有的“线”，那么如何过滤出来呢</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226171347.png" width = "600" height = "" alt="20210226171347" align=center />

<p>框选所有东西，点击“过滤器”，勾选你要的类别即可</p>
<p>有时候需要更精细的过滤，这个需要插件实现：</p>
<p><a href="http://www.hwbim.com/Modeling/index.html" target="红瓦官网">红瓦的建模大师–免费</a></p>
<p><a href="http://www.glsbim.com/nav/11.html" target="橄榄山官网">橄榄山插件–部分功能免费</a></p>
<h1 id="层间复制"><a href="#层间复制" class="headerlink" title="层间复制"></a>层间复制</h1><p>平面复制（CO）都知道不说了</p>
<p>层间复制如下图，选中→复制到剪贴板→与选定标高对齐</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226172856.png" width = "600" height = "" alt="20210226172856" align=center />

<h1 id="模型组"><a href="#模型组" class="headerlink" title="模型组"></a>模型组</h1><p>类似SU的组件功能，配合层间复制使用</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226183755.png" width = "600" height = "" alt="20210226183755" align=center />

<p>不过<strong>组</strong>太多容易卡</p>
<p>组内编辑（双击组），所有<strong>组</strong>都会改变，也会导致CPU占有率瞬间拉满，建议组做好了再复制</p>
<h1 id="修剪（TR）与对齐（AL）"><a href="#修剪（TR）与对齐（AL）" class="headerlink" title="修剪（TR）与对齐（AL）"></a>修剪（TR）与对齐（AL）</h1><p>修剪快捷键TR，常用命令，修剪墙/修剪线/修剪管道，用处非常多</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/修剪.gif" width = "600" height = "" alt="修剪" align=center />

<p>对齐快捷键(AL)，又一个常用命令，构件一般有位置参照，对齐比移动用的多</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/对齐.gif" width = "600" height = "" alt="对齐" align=center />

<h1 id="创建类似实例"><a href="#创建类似实例" class="headerlink" title="创建类似实例"></a>创建类似实例</h1><p>当你已经有一堵墙，你会怎么画类似的墙</p>
<p>从建筑选项卡下找到“墙”？</p>
<p>背快捷键WA？</p>
<p>还是复制？</p>
<p>都可以，这些方法，但实际上最快最通用的方法是</p>
<p>选中物体，右键，<strong>创建类似实例</strong></p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228161948.png" width = "300" height = "" alt="20210228161948" align=center />

<p>这个方法相当通用，应当优先掌握</p>
<h1 id="视图范围"><a href="#视图范围" class="headerlink" title="视图范围"></a>视图范围</h1><p>我们都知道平面图是俯视楼层得到的，那么到底是俯视楼层的哪个高度得到的呢，最高处？</p>
<p>啊，这个说起来还有些复杂</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226191141.png" width = "600" height = "" alt="20210226191141" align=center />

<p>毕竟点开视图属性栏的<strong>视图范围</strong>，里面竟然有这么多参数</p>
<p>我们还是看看<a href="http://help.autodesk.com/view/RVT/2018/CHS/?guid=GUID-58711292-AB78-4C8F-BAA1-0855DDB518BF" target="帮助">帮助文档</a></p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226191044.png" width = "" height = "" alt="20210226191044" align=center />

<p>简单理解一下，<strong>顶部</strong>高度到<strong>底部</strong>高度是我们的主要视图范围，也就是蓝色区域</p>
<p>如果你画了一盏灯，提示你图元在本视图不可见，调节一下<strong>顶部</strong>偏移</p>
<p>黄色区域能够看到，但是颜色更淡，不能选中</p>
<p>如果你发现你在一层画图，但是被地下一层的管道干扰了，可以调调第四个参数，让它等于<strong>底部</strong></p>
<hr>
<p>ok，十个必学操作介绍完毕</p>
<p>当然，其实这些操作各种教程都有</p>
<p>然而这是设计师们刚开始用Revit正向设计最常遇到的一些问题</p>
<p>背后有一定的共性，上手中遇到什么其他问题，欢迎评论区交流</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226193124.png" width = "300" height = "" alt="20210226193124" align=center />
]]></content>
      <categories>
        <category>正向设计合集</category>
      </categories>
      <tags>
        <tag>Revit</tag>
        <tag>软件操作</tag>
        <tag>10个小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Revit快速上手（1）--了解Revit</title>
    <url>/2021/022350826.html</url>
    <content><![CDATA[<p align="center"><font size=4>---摘要：Revit纯新手快速上手-基本概念---</font></p>
<a id="more"></a>

<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>快速上手之前，掌握BIM的概念</p>
<p>不同于手绘向CAD的工具迭代式改变，BIM应用在<font color=red>设计方面</font>替代CAD的想法是基于这样一个思维</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210224102500.png" width = "600" height = "" alt="20210224102500" align=center />


<p>传统的点对点的沟通无法高效协调各专业的设计</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">理论上，每有一个设计变动，都要向其他所有相关人员报备</span><br><span class="line">这当然不可能，所以实际上只能做节点管理</span><br><span class="line">这是一种粗放的结果管理，效率是有上限的（也就是不够精细，惧怕复杂)</span><br></pre></td></tr></table></figure>
<p>信息化的数据管理才是王道</p>
<p>我们的前面已经有软件工程设计，航空航天工程设计，机械工程设计，甚至物流工程设计等多个工程设计类别已经走过这条路了，现在的建筑工程设计信息化不令人惊讶</p>
<h2 id="Revit软件思路"><a href="#Revit软件思路" class="headerlink" title="Revit软件思路"></a>Revit软件思路</h2><h3 id="工作空间"><a href="#工作空间" class="headerlink" title="工作空间"></a>工作空间</h3><p>进入Revit，首先是空的三维空间</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20201126211830.png" width = "600" height = "" alt="20201126211830" align=center />

<p>空白的三维空间需要原点和坐标系</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20201126212059.png" width = "600" height = "" alt="20201126212059" align=center />

<p>找到底边栏灯泡图案，打开隐藏图元，就能看到“测量点”和“项目基点”</p>
<p>坐标系默认建出，ok，已经有了一个可以定义空间中任意一点位置的工作空间了</p>
<h3 id="标高与轴网"><a href="#标高与轴网" class="headerlink" title="标高与轴网"></a>标高与轴网</h3><p>标高与轴网来分割空间是最基本的设计思路，这里不赘述</p>
<p>那么，是先画标高还是先有轴网呢？</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20201126213614.png" width = "300" height = "" alt="20201126213614" align=center />

<p>先画标高，画完标高建立分层的空间，轴网放置于空间中的每一层</p>
<p>操作如下:项目浏览器–→双左击立面视图–→找到默认标高–→修改高度并复制，创建自己的标高</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20201126214136.png" width = "600" height = "" alt="20201126214136" align=center />

<p>再画轴网，轴网会放置在你已建标高的每一层</p>
<p>（有时你在某些高层平面看不见轴网，就是因为有新建的标高，旧的轴网没达到新标高高度）</p>
<p>操作：建筑选项卡–→点击轴网–→左键点击，划线即可</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20201126220518.png" width = "600" height = "" alt="20201126220518" align=center />

<ul>
<li>可能的问题：没有项目浏览器怎么办</li>
</ul>
<p>视图选项卡下“用户界面”，下拉菜单中勾上即可，位置可以拖动</p>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>什么叫视图，为什么需要视图</p>
<p>事实上在三维软件中三视图的概念依然好用（当然你可以建立自定义视图）</p>
<p>楼层平面实际上就是俯视该楼层得到</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20201126215303.png" width = "600" height = "" alt="20201126215303" align=center />

<p>立剖也是如此</p>
<p>而平立剖面视图，做好标注，设置图面，套上图框，就可以转成DWG格式图纸</p>
<p>可想而知，对于在不同视图出现的同一个物体，改动一处，所有图纸均会更改</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20201126220140.png" width = "600" height = "" alt="20201126220140" align=center />

<h3 id="族"><a href="#族" class="headerlink" title="族"></a>族</h3><p>通过工作空间的划分，以及各个视图的建立，你可以在你想要的位置绘制模型了</p>
<p>下一个问题，AutoCAD用线条绘制图形，Revit还用线条吗</p>
<p>矩形可以代表一堵墙，4条线，换成立方体，12条线······工作量*3？</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225141137.png" width = "300" height = "" alt="20210225141137" align=center />


<p>那么直接放一个扁扁的立方体代表墙呢，恭喜你，开发人员也是这么想的</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225143237.png" width = "150" height = "" alt="20210225143237" align=center />

<p>建筑无非也是靠各种零件组装起来的，然而要是每个三维物体都建成你想要的样子，让你直接放上去，那也太难为开发人员了</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225143520.png" width = "150" height = "" alt="20210225143520" align=center />

<p>Revit使用族概念（family）解决这个问题</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225142811.png" width = "600" height = "" alt="20210225142811" align=center />

<p>我先创造一个墙的族在这里，多高多厚什么材质什么颜色你自己定义（不同的类型）</p>
<img src="https://s3.ax1x.com/2021/02/25/yvSbRO.png" width = "600" height = "" alt="20210225142811" align=center />

<p>一个族有公共属性，每个类型有自己的独特属性，类型从属于族，就像儿子从属于…家庭！这也就是为什么人家就叫family（族）</p>
<p>这样就能做到既简单又比较灵活（工具软件大家都有体会，自由度越高越难精通）</p>
<ul>
<li>注意事项：时刻注意新建类型</li>
</ul>
<p><a href="https://imgtu.com/i/yv9kh6"><img src="https://s3.ax1x.com/2021/02/25/yv9kh6.png" width = "600" height = "" alt="yv9kh6.png"/></a></p>
<p>当你复制了原有的族类型，想要修改，<font color=red>时刻记得新建类型，就是图中的“复制”</font>，你一定不希望想改一堵墙的厚度，结果把之前的厚度全改了，两个星期之后才发现</p>
<h2 id="寻找已有资源"><a href="#寻找已有资源" class="headerlink" title="寻找已有资源"></a>寻找已有资源</h2><p>ok，我们已经了解了Revit中重要的几个概念，工作空间-标高轴网-视图-族-属性，你可能会奇怪为什么我不写具体操作，介绍每个按钮，下拉，勾选，空格都是干嘛的，怎么用</p>
<p>一方面是这个东西自己试试才能掌握，另一方面，一个工具软件而已，不是什么奇技淫巧，教程到处都是</p>
<p>简单的操作方法教程B站搜索即可，下面给出几个参考</p>
<ul>
<li><p><a href="https://www.bilibili.com/video/BV16J411P7Tv?p=1" target="少侠初级篇">B站-一米网校-Revit操作初级篇</a>–1080P–声音清晰–有课件–详细</p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1qJ411K7T5?from=search&seid=6999622478451740799" target="少侠中级篇">B站-一米网校-Revit操作中级篇</a>–1080P–声音清晰–有课件–详细</p>
</li>
<li><p><a href="https://space.bilibili.com/476802816?from=search&seid=9468672821694510349" target="露仔9527">B站-个人up-主讲机电</a>–1080P–声音清晰–针对项目讲解</p>
</li>
</ul>
<p>提示：操作合集类视频就像字典，主要用来<font color=red>查阅</font></p>
<p><font color=red>千万不要全看，千万不要看完了再建模</font></p>
<p>哪里不会找相关的内容，1.5倍速过一下</p>
]]></content>
      <categories>
        <category>正向设计合集</category>
      </categories>
      <tags>
        <tag>Revit</tag>
        <tag>软件操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Revit安装相关问题</title>
    <url>/2021/022029739.html</url>
    <content><![CDATA[<p align="center"><font size=4>---摘要：Revit软件简介，下载，安装及注意事项---</font></p>
<a id="more"></a>

<h2 id="Revit软件介绍"><a href="#Revit软件介绍" class="headerlink" title="Revit软件介绍"></a>Revit软件介绍</h2><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222135733.png" width = "800" height = "" alt="20210222135733" align=center />

<p><strong>创建协调、一致且完整的基于模型的设计</strong></p>
<p>使用 Revit® 在从概念设计、可视化、分析到制造和施工的整个项目生命周期中提高效率和准确性</p>
<ul>
<li>开始在三维环境中准确和精确地建模</li>
<li>随着模型的开发，自动更新楼层平面图、立面和剖面</li>
<li>让 Revit 通过自动化功能处理日常和重复性任务，使您可以专注于价值更高的工作</li>
</ul>
<p><a href="https://www.autodesk.com.cn/products/revit/overview?term=1-YEAR&support=null#revit-intro" target="Revit软件官网">以上是来自Autodesk中文官网的软件介绍</a></p>
<p>当然，不需要过多的描述，Revit作为最知名的三维建筑软件，因为其多功能，多专业，族建立与流通简单，是绝大多数做正向设计或者建筑信息化的设计院绕不开的软件，如果你有意了解更多的三维建筑软件，不妨参考BIMBOX的“软件江湖”系列文章：</p>
<blockquote>
<p><a href="https://bimbox.top/351.html" target="BIMBOX">BIM江湖 | 软件兵器谱</a></p>
</blockquote>
<h2 id="Revit软件安装"><a href="#Revit软件安装" class="headerlink" title="Revit软件安装"></a>Revit软件安装</h2><p>AUTO家软件安装程序差不多，<font color=red>下载–→解压–→安装–→破解</font></p>
<p>当然，支持正版，规模以上公司都或多或少购买了账号，这也是软件商的盈利方式</p>
<p>安装教程一搜就有，这里放<a href="http://www.chinarevit.com/software" target="论坛下载">Revit中文网</a>的资源，其他BIM用到的软件、插件之类也有收录<br><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222192647.png" width = "600" height = "" alt="20210222192647" align=center /></p>
<h2 id="安装中遇到的问题"><a href="#安装中遇到的问题" class="headerlink" title="安装中遇到的问题"></a>安装中遇到的问题</h2><h4 id="安装过程过慢"><a href="#安装过程过慢" class="headerlink" title="安装过程过慢"></a>安装过程过慢</h4><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222193006.png" width = "" height = "" alt="20210222193006" align=center />

<p>一般是在这个界面卡住，这个界面是在解压缩并安装</p>
<p>卡住一般是因为程序试图从官网下载自带族库和样板</p>
<p>所以<font color=red>需断网安装</font></p>
<h4 id="默认族库丢失"><a href="#默认族库丢失" class="headerlink" title="默认族库丢失"></a>默认族库丢失</h4><p>断网安装会导致默认族库丢失</p>
<p>安装后检查，若没有族库</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222203138.png" width = "600" height = "" alt="20210222203138" align=center />

<p>可下载后解压，放入指定文件夹</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222203348.png" width = "300" height = "" alt="20210222203348" align=center />

<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222204745.png" width = "300" height = "" alt="20210222204745" align=center />

<p>下载链接在之前的<a href="http://www.chinarevit.com/software" target="论坛下载">Revit中文网</a>，注册机也在这个页面有下载</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222203559.png" width = "300" height = "" alt="20210222203559" align=center />


<h4 id="安装报错"><a href="#安装报错" class="headerlink" title="安装报错"></a>安装报错</h4><ul>
<li>error1311：通常是安装包有损坏</li>
</ul>
<p>注意下载完整安装包</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222203803.png" width = "300" height = "" alt="20210222203803" align=center />

<ul>
<li>error1719：原因Windows Installer 服务未启动</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222204153.png" width = "300" height = "" alt="20210222204153" align=center />

<p>解决方案控制面板–→管理工具–→服务–→找到Windows Installer–→选择启动方式为自动启动–→点击下方的启动(S)–→应用<br>启动完成，Win+R输入CMD回车，进入命令行界面输入regsvr32 msi.dll</p>
<ul>
<li>所有组件安装失败</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222205101.png" width = "300" height = "" alt="20210222205101" align=center />

<p>一般出现在已经安装了其他版本Revit的电脑上</p>
<p>安装Navisworks等软件也有类似情况</p>
<p>注册表冲突导致组件安装不上</p>
<p>使用Revit自带的卸载工具卸载AUTO系列软件（下图为默认位置）</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222205851.png" width = "600" height = "" alt="20210222205851" align=center />

<p>然后在管理员账户下重新安装（推荐每次安装相同软件的不同版本时，都在管理员账户下安装）</p>
<p>参考<a href="https://answers.microsoft.com/zh-hans/windows/forum/windows_10-security/win10%E6%80%8E%E4%B9%88%E5%90%AF%E7%94%A8administr/b93f8274-7316-4112-bfa1-5b7bfe5f46f8" target="开启并进入管理员账户">微软社区的回答</a>，开启管理员账户</p>
]]></content>
      <categories>
        <category>正向设计合集</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>Revit</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习笔记4</title>
    <url>/2021/031150699.html</url>
    <content><![CDATA[<p align="center"><font size=4>---摘要：C语言学习个人向记录-字符串相关---</font></p>
<a id="more"></a>

<h1 id="字符串与字符串函数"><a href="#字符串与字符串函数" class="headerlink" title="字符串与字符串函数"></a>字符串与字符串函数</h1><h2 id="字符串声明"><a href="#字符串声明" class="headerlink" title="字符串声明"></a>字符串声明</h2><p>两种声明方式</p>
<p>数组声明和指针声明</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#define HRD &quot;I am hardworking.&quot;</span></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    char words[90]=<span class="string">&quot;I am hardworking.&quot;</span>;</span><br><span class="line">    const char *pt1=HRD;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,words);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,HRD);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,pt1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数组会制造副本，words是指针常亮，指向被制造出来的副本</p>
<p>pt1则直接指向HRD，二三行打印出来是一样的</p>
<p>这也是为什么一定要把指针声明的字符串声明为const</p>
<p>“I am hardworking.”也不过是个指针，它的内容被改变了，你是很难发现的</p>
<p>可以的操作：</p>
<p>pt1++,words[0],pt1[0],words+1,*(pt1+1), *(words+1)</p>
<p>不可以的操作：</p>
<p>words++;//数组名是指针常量，++了地址就变了</p>
<p>pt1[0]=’1’;//不能这样嗷，指针声明别瞎改</p>
]]></content>
      <categories>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习笔记3</title>
    <url>/2021/03093183.html</url>
    <content><![CDATA[<p align="center"><font size=4>---摘要：C语言学习个人向记录-数组和指针---</font></p>
<a id="more"></a>

<h1 id="数组和指针"><a href="#数组和指针" class="headerlink" title="数组和指针"></a>数组和指针</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化示例，下面这个是写死的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const int days[MONTHS]=&#123;31,28,31,30,31,30,31,31,30,31,30,31&#125;</span><br></pre></td></tr></table></figure>
<h3 id="指定初始化器"><a href="#指定初始化器" class="headerlink" title="指定初始化器"></a>指定初始化器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int days[MONTHS]=&#123;31,23,[4]=31,34,231,[1]=3&#125;;</span><br></pre></td></tr></table></figure>
<p>其实不太知道这个为啥要叫“指定初始化器”</p>
<p>可能是个翻译问题</p>
<p>用下标指定某个数</p>
<p>多出来的会顺序指给下几个数</p>
<p>后面的指定覆盖前面的指定</p>
<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><h2 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h2><p>指针指的数组头，也就是数组名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">double date[];</span><br><span class="line">*(date+2);</span><br><span class="line">*date+2;</span><br><span class="line">&amp;date[3]=date+2;</span><br><span class="line">//一种加和办法</span><br><span class="line">total += *date++;//注意结合律从右往左</span><br></pre></td></tr></table></figure>
<h2 id="指针操作"><a href="#指针操作" class="headerlink" title="指针操作"></a>指针操作</h2><p>const 用来保护数组</p>
<p>一般变量，用指针何必呢，直接搞一个副本对吧</p>
<p>然而数组，你每次都去复制肯定不行，缓存遭不住</p>
<p>于是函数调用数组的时候，一般都是调用其指针</p>
<p>出现数组被各种函数加工的情况</p>
<p>我们要保护数组的值，下标也不能超边界，更不能修改未初始化的指针指向的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">viod show_array(const double *ar,int n);</span><br><span class="line">//这样的函数原型意思是不会在函数中改ar数组的值</span><br><span class="line">//那你在外面改呢，随意</span><br><span class="line"></span><br><span class="line">const double locked[]=&#123;1,2,3,3,4&#125;;</span><br><span class="line">const double *pc=locked;//可以</span><br><span class="line">pc=&amp;locked[3];//可以</span><br><span class="line"></span><br><span class="line">const double locked[]=&#123;1,2,3,3,4&#125;;</span><br><span class="line">double *pc;</span><br><span class="line">pc=&amp;locked[3];//不可以</span><br><span class="line"></span><br><span class="line">//函数实参也是，有const的数组就别放入没有const的函数里</span><br></pre></td></tr></table></figure>
<p>复习一下数据类型的大小，要不容易搞混</p>
<table>
<thead>
<tr>
<th>类型</th>
<th align="center">16位</th>
<th align="center">32位</th>
<th align="right">64位</th>
</tr>
</thead>
<tbody><tr>
<td>char</td>
<td align="center">1字节</td>
<td align="center">1字节</td>
<td align="right">1字节</td>
</tr>
<tr>
<td>*指针</td>
<td align="center"><strong>2字节</strong></td>
<td align="center"><strong>4字节</strong></td>
<td align="right"><strong>8字节</strong></td>
</tr>
<tr>
<td>short int</td>
<td align="center">2字节</td>
<td align="center">2字节</td>
<td align="right">2字节</td>
</tr>
<tr>
<td>int</td>
<td align="center"><strong>2字节</strong></td>
<td align="center">4字节</td>
<td align="right">4字节</td>
</tr>
<tr>
<td>long</td>
<td align="center">4字节</td>
<td align="center">8字节</td>
<td align="right">8字节</td>
</tr>
<tr>
<td>long long</td>
<td align="center">8字节</td>
<td align="center">8字节</td>
<td align="right">8字节</td>
</tr>
<tr>
<td>u int</td>
<td align="center"><strong>2字节</strong></td>
<td align="center">4字节</td>
<td align="right">4字节</td>
</tr>
<tr>
<td>float</td>
<td align="center">4字节</td>
<td align="center">4字节</td>
<td align="right">4字节</td>
</tr>
<tr>
<td>double</td>
<td align="center">8字节</td>
<td align="center">8字节</td>
<td align="right">8字节</td>
</tr>
</tbody></table>
<p>可以看出，不同的系统主要是指针大小差距大。。。</p>
<p>当你在储存一个字符的时候，也要用8个字节</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int zippo[4][2]=&#123;&#123;2,3&#125;,&#123;6,8&#125;,&#123;2,7&#125;,&#123;9,0&#125;&#125;;</span><br><span class="line">**zippo=*zippo[0]=zippo[0][0];</span><br><span class="line">zippo+1=&amp;zippo[1];//注意zippo+1和&amp;zippo[1]只是位置相同，每个单元大小不一</span><br><span class="line">zippo[0]+1=&amp;zippo[0][1];</span><br><span class="line">zipp0[2][1]=7;</span><br><span class="line"></span><br><span class="line">//调用</span><br><span class="line">int show_array2(int (*pz)[2],int rows);//指针形式。、</span><br><span class="line">int show_array2(int zippo[][2],int rows);</span><br><span class="line">int show_array2(int [][2],int rows);//省略名字</span><br><span class="line"></span><br><span class="line">int *p1;</span><br><span class="line">p1=zippo;//不行</span><br><span class="line">p1-zippo[0];//彳亍</span><br><span class="line">int (*p2)[2];</span><br><span class="line">p2=zippo;//彳亍</span><br><span class="line"></span><br><span class="line">int **p3;</span><br><span class="line">p3=zippo;//不行,一个是指向int数字指针的指针，一个是指向数组的指针</span><br></pre></td></tr></table></figure>
<h3 id="复合字面量"><a href="#复合字面量" class="headerlink" title="复合字面量"></a>复合字面量</h3><p>是这样的，通常你可以在定义某类型的变量时，直接指定一个值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int i1=5;</span><br><span class="line">char ch=<span class="string">&#x27;5&#x27;</span>;</span><br><span class="line">int array[][]=&#123;&#123;1,2&#125;,&#123;4,7&#125;,&#123;9,10&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>那么指针呢，A，是不是尬住了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#define COLS 4</span></span><br><span class="line">int sum(const int ar[][COLS],int rows);</span><br><span class="line">int main(void)&#123;</span><br><span class="line">    int(*pt1)[COLS];</span><br><span class="line">    pt1=(int [2][COLS])&#123;&#123;1,2,3,4&#125;,&#123;1,3,2,4&#125;&#125;;</span><br><span class="line">    int total1=sum(pt1,2);</span><br><span class="line">    int total2=sum((int[2][4])&#123;&#123;1,5,2,1&#125;,&#123;1,2,3,1&#125;&#125;,2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;和1=%2d，和2=%2d\n&quot;</span>,total1,total2);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line">int sum(const int ar[][COLS],int rows)&#123;</span><br><span class="line">    int tol;</span><br><span class="line">    int r,c;</span><br><span class="line">    <span class="keyword">for</span>(r=0;r&lt;rows;r++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(c=0;c&lt;COLS;c++)&#123;</span><br><span class="line">            tol+=ar[r][c];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> tol;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>学习笔记</tag>
        <tag>指针</tag>
        <tag>数组</tag>
        <tag>多维数组</tag>
        <tag>复合字面量</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习笔记2</title>
    <url>/2021/030850316.html</url>
    <content><![CDATA[<p align="center"><font size=4>---摘要：C语言学习个人向记录-输入输出验证---</font></p>
<a id="more"></a>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h2><p>以前的C对于函数参数规定的不细，你可以不标形参类型，容易造成混乱</p>
<p>有时候我们可以这么来用，小函数写在前面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//既是函数定义，也是函数原型</span><br><span class="line">int imax(int a,int b)&#123;<span class="built_in">return</span> a&gt;b?a:b;&#125;</span><br><span class="line">int main(viod)</span><br><span class="line">&#123;</span><br><span class="line">    something;//主函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="递归recurion"><a href="#递归recurion" class="headerlink" title="递归recurion"></a>递归recurion</h2><p>递归没有循环效率高，但胜在简洁</p>
<p>来个例子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/* recur.c ---循环示例 */</span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line">void up_and_down(int n);</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    up_and_down(1);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line">void up_and_down(int n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Level %d : n location %p\n&quot;</span>,n,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n&lt;4)</span><br><span class="line">    &#123;</span><br><span class="line">        up_and_down(n+1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;LEVEL %d : n location %p\n&quot;</span>,n,&amp;n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出结果</span><br><span class="line">Level 1 : n location 000000000061FE00</span><br><span class="line">Level 2 : n location 000000000061FDD0</span><br><span class="line">Level 3 : n location 000000000061FDA0</span><br><span class="line">Level 4 : n location 000000000061FD70</span><br><span class="line">LEVEL 4 : n location 000000000061FD70</span><br><span class="line">LEVEL 3 : n location 000000000061FDA0</span><br><span class="line">LEVEL 2 : n location 000000000061FDD0</span><br><span class="line">LEVEL 1 : n location 000000000061FE00</span><br></pre></td></tr></table></figure>
<p>可以看出，在相反顺序任务中这样的调用后语句很有用</p>
<h2 id="编译多源代码文件的程序"><a href="#编译多源代码文件的程序" class="headerlink" title="编译多源代码文件的程序"></a>编译多源代码文件的程序</h2><p>vsc支持似乎不太好，暂时不研究了</p>
<h2 id="指针-pointer-amp-与"><a href="#指针-pointer-amp-与" class="headerlink" title="指针   pointer   &amp;与*"></a>指针   pointer   &amp;与*</h2><p>&amp;：指向某指针<br>*：解指向运算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ptr=&amp;bah;//将ptr“指向”bah</span><br><span class="line">val=*ptr;//将ptr“指向”地址的值提取出来</span><br></pre></td></tr></table></figure>
<p>声明指针：int * pi ;</p>
<p>指针：&amp;pi</p>
<p>解指针：*ppi    </p>
]]></content>
      <categories>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>学习笔记</tag>
        <tag>递归</tag>
        <tag>指针</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习笔记1</title>
    <url>/2021/030550635.html</url>
    <content><![CDATA[<p align="center"><font size=4>---摘要：C语言学习个人向记录-输入输出验证---</font></p>
<a id="more"></a>
# 2021/3/5 输入输出--通用I/O函数

<h2 id="单字符I-O"><a href="#单字符I-O" class="headerlink" title="单字符I/O"></a>单字符I/O</h2><h2 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h2><p>缓冲输入–缓冲区–使用</p>
<p>无缓冲输入–直接使用</p>
<p>UNIX和IBM等使用无缓冲的方法不一样，还是常用缓冲</p>
<h2 id="结束键盘输入"><a href="#结束键盘输入" class="headerlink" title="结束键盘输入"></a>结束键盘输入</h2><h3 id="文件、流和键盘输入"><a href="#文件、流和键盘输入" class="headerlink" title="文件、流和键盘输入"></a>文件、流和键盘输入</h3><p>file在各个系统不一致</p>
<p>low-level I/O不好用，没必要搞标准库</p>
<p>standard I/O package  最终用这个统一的</p>
<p>不一致性：</p>
<p>有些系统吧文件信息放一边，文件放另一边</p>
<p>有些系统用换行符换行，有些用回车+换行</p>
<p>stream 流，数据流，没看懂</p>
<p>目前的理解，屏幕输出是程序运行的“副产物”，键盘输入是文件写入</p>
<p>既然键盘输入是文件写入，那么一定能结束文件</p>
<h3 id="文件结尾"><a href="#文件结尾" class="headerlink" title="文件结尾"></a>文件结尾</h3><p>getchar()这个函数，是识别输入-1为结尾的</p>
<p>char类型没有-1，无所谓</p>
<p>但是getchar实际上会出int类型的值</p>
<p>EOF是内定文件结尾</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int ch;</span><br><span class="line"><span class="keyword">while</span>((ch=getchar())!=EOF)</span><br></pre></td></tr></table></figure>
<h2 id="重定向和文件"><a href="#重定向和文件" class="headerlink" title="重定向和文件"></a>重定向和文件</h2><p>不止可以用键盘输入，什么磁带，穿孔卡片，语音都可以</p>
<p>更多的，从其它文件</p>
<p>打开，读取，写入，关闭文件</p>
<p>也可以重新定向</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210305173439.png" width = "600" height = "" alt="20210305173439" align=center />

<p>成功了，程序+空格+&lt;+空格+文件名就行</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210305173751.png" width = "600" height = "" alt="20210305173751" align=center />

<p>OMG，我居然用程序创造了一个文件</p>
<p>似乎在使用电脑的历史中我总是用别人的程序创造文件</p>
<p>所以自己写的程序创造了一个文件感觉很特别</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210305174217.png" width = "600" height = "" alt="20210305174217" align=center />

<p>利用组合重定向复制一个文件</p>
<p>定向输入和输出的顺序无关紧要</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdbool.h&gt;</span></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int ch;</span><br><span class="line">    <span class="keyword">while</span> ((ch=getchar())!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        putchar(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>好家伙，用代码替代刚才那些操作就要用到新的函数了</p>
<ul>
<li><strong>fopen()</strong></li>
</ul>
<p>新的类型 FILE * fp</p>
<p>fp=fopen(filename,”r”);</p>
<p>文件使用方式由r,w,a,t,b，+六个字符拼成，各字符的含义是：</p>
<p>r(read): 只读</p>
<p>w(write): 只写</p>
<p>a(append): 追加</p>
<p>t(text): 文本文件，可省略不写</p>
<p>b(binary): 二进制文件</p>
<p>+: 读和写</p>
<p>代码，逐字复制一个文本文档</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int ch;</span><br><span class="line">    FILE * fp;</span><br><span class="line">    char fname[50];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the name of the file:&quot;</span>);</span><br><span class="line">    scanf(<span class="string">&quot;%s&quot;</span>,fname);</span><br><span class="line">    fp=fopen(fname,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp==NULL)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line">        //<span class="built_in">exit</span>(1);</span><br><span class="line">    &#125;</span><br><span class="line">//从打开文件弄个字符用函数getc（）</span><br><span class="line">    <span class="keyword">while</span>((ch=getc(fp))!=EOF)</span><br><span class="line">        &#123;</span><br><span class="line">            putchar(ch);</span><br><span class="line">        &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="更友好的输入"><a href="#更友好的输入" class="headerlink" title="更友好的输入"></a>更友好的输入</h2><p>有一个很诡异的事儿</p>
<p>就是输入的东西会进一个缓冲队列</p>
<p>读一个字符，后面的字符还在队列里</p>
<p>比如说，你用键盘输入一个1+Enter</p>
<p>实际上’1’+’\n’都被存入，你就相当于输入两个字符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//基本上你需要在循环里加上这个，跳过其他输入</span><br><span class="line"><span class="keyword">while</span>(getchar()!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="built_in">continue</span>;</span><br></pre></td></tr></table></figure>
<p>注意getchar()和scanf()的区别</p>
<p>scanf用来读数值，会跳过换行符，空格和制表符</p>
<ul>
<li>跳过输入中不需要的部分</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">char get_first(void)</span><br><span class="line">&#123;</span><br><span class="line">    int ch;</span><br><span class="line">    ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(getchar()!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">continue</span>;</span><br><span class="line">    <span class="built_in">return</span> ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于输入界面的内容，可以总结到这个程序当中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/* menuette.c ---菜单程序 */</span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line">char get_char(void);</span><br><span class="line">char get_first(void);</span><br><span class="line">void count(void);</span><br><span class="line">int get_int(void);</span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line">    int choice;</span><br><span class="line">    <span class="keyword">while</span> ((choice=get_char())!=<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        switch (choice)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;高买低卖\n&quot;</span>);</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            putchar(<span class="string">&#x27;\a&#x27;</span>);//ANSI</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:count();</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        default:<span class="built_in">printf</span>(<span class="string">&quot;Program error!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bye.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line">char get_char(void)</span><br><span class="line">&#123;</span><br><span class="line">    int ch;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the letter of your choice:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a.advice        b.bell\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c.count         q.quit\n&quot;</span>);</span><br><span class="line">    ch=get_first();</span><br><span class="line">    <span class="keyword">while</span>((ch&lt;<span class="string">&#x27;a&#x27;</span>||ch&gt;<span class="string">&#x27;c&#x27;</span>)&amp;&amp;ch!=<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入a，b，c或者q退出，别瞎搞\n&quot;</span>);</span><br><span class="line">        ch=get_first();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char get_first(void)</span><br><span class="line">&#123;</span><br><span class="line">    int ch;</span><br><span class="line">    ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(getchar()!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">continue</span>;</span><br><span class="line">    <span class="built_in">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void count(void)</span><br><span class="line">&#123;</span><br><span class="line">    int n,i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入一个整数，然后报数\n&quot;</span>);</span><br><span class="line">    n=get_int();</span><br><span class="line">    <span class="keyword">for</span>(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(getchar()!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int get_int(void)</span><br><span class="line">&#123;</span><br><span class="line">    int input;</span><br><span class="line">    char ch;</span><br><span class="line">    <span class="keyword">while</span>((scanf(<span class="string">&quot;%d&quot;</span>,&amp;input))!=1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>((ch=getchar())!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            putchar(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不是一个整数\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;整数什么样不知道，12，342,3这种：\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>学习笔记</tag>
        <tag>输入输出</tag>
        <tag>fopen</tag>
        <tag>重定向</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习笔记0</title>
    <url>/2021/03011290.html</url>
    <content><![CDATA[<p align="center"><font size=4>---摘要：C语言学习个人向记录---</font></p>
<a id="more"></a>

<h1 id="学习目的"><a href="#学习目的" class="headerlink" title="学习目的"></a>学习目的</h1><p>第一篇笔记记一下学习目的</p>
<p>BIMer成天和软件打交道，一定会发现软件的限制</p>
<p>这种时候应该将软件工作托付专业人士</p>
<p>奈何并没有这么简单</p>
<p>建筑行业工具软件市场没有那么发达</p>
<p>BIM作为一个大<del>泡沫</del>行业尚处于混沌状态</p>
<p>二次开发这种建筑工程设计与软件工程<strong>灰色地带</strong>的行当就自然出现</p>
<p>为什么说是行当，故意的，因为这甚至不能当做一个正经行业</p>
<p>软件工程本身不挣钱，懂得都懂</p>
<p>建筑设计本身也不值钱，懂得也都懂</p>
<p>二次开发叠了两个头秃行业的buff。。。</p>
<img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210301205942.png" width = "300" height = "" alt="20210301205942" align=center />

<p>本身又没有靠谱的商业模式（橄榄山老板是个零几年就搞Revit二次开发的大神，可是有多少公司会为橄榄山付费呢）</p>
<p>可以说比较尴尬</p>
<p>然而很多时候尚处于行业开拓期的人们就是要自己想办法</p>
<p>没有那么多银弹，或者突然冒出来KILLER级别的东西给你用</p>
<p>好的铁匠会给自己打把好锤子</p>
<p>迪士尼的动画实验室是世界顶级的图形学实验室</p>
<p>华为会给自家手机设计旗舰芯片</p>
<p>国产替代这两年基本上从概念走向商业价值</p>
<p>大家还是不能只看见人家吃肉，对吧</p>
<h1 id="学习思路"><a href="#学习思路" class="headerlink" title="学习思路"></a>学习思路</h1><p>还是把应用部分放到C#上</p>
<p>C语言看一遍就溜</p>
<p>不做详尽笔记，脑图这些，网上到处都是</p>
<p>零散记下收获，有机会再整理</p>
<h1 id="2021-3-1"><a href="#2021-3-1" class="headerlink" title="2021/3/1"></a>2021/3/1</h1><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>getchar()/putchar()</p>
<p>不需要转换说明，stdio.h头文件中</p>
<p>while((ch=getchar())!=\n’){</p>
<p>something;</p>
<p>}</p>
<p>读取每个字符并操作，直到空格</p>
<ul>
<li><strong>新的库</strong></li>
</ul>
<p>#include&lt;ctype.h&gt;</p>
<p>isalpha() // 如果是一个字符，返回一个非零值</p>
<p>tolower() 大写改小写</p>
<ul>
<li><strong>isal系列</strong></li>
</ul>
<p>isalnum/isalpha/isblank/iscntrl/isdigit/isgraph/islower/isprint/ispunct/isspace/isupper/isxdigit</p>
<p>字母或数字/字母/标准空白（空格、水平制表符、换行）/ctrl+/数字/除空格之外的任何可打印字符/小写/可打印字符/标点符号/空白/大写/十六进制数字</p>
<ul>
<li><p><strong>if else的匹配问题</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if（）</span><br><span class="line">  if()</span><br><span class="line">    sth;</span><br><span class="line">else</span><br><span class="line">  sth;</span><br></pre></td></tr></table></figure>
<p>没有花括号，if会和最近的else匹配，缩进被忽略了</p>
</li>
<li><p><strong>标记（flag）</strong></p>
</li>
</ul>
<p>举了一个算因数的例子</p>
<p>我来抄一下代码，半抄半写吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//divisors.c  --使用嵌套算约数</span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdbool.h&gt;</span></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    unsigned long num; //待判断的素数</span><br><span class="line">    bool isPrime;</span><br><span class="line">    unsigned long i; //可能的约数</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输整数，输别的退出&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>((scanf(<span class="string">&quot;%lu&quot;</span>,&amp;num))==1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=2,isPrime=<span class="literal">true</span>;(i*i)&lt;=num;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i*i==num)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;唯一约数%lu&quot;</span>,i);</span><br><span class="line">                isPrime=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num%i==0)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;俩约数%lu，%lu&quot;</span>,i,num/i);</span><br><span class="line">                isPrime=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isPrime)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;好家伙，素数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里面的isPrime就是一个flag</p>
<p>放在for的第一个分号前保证刷新</p>
<ul>
<li><strong>逻辑运算</strong></li>
</ul>
<p>&amp;&amp; || ! </p>
<p>记住优先级，非&gt;与&gt;或</p>
<p>序列点，副作用兑现，顺序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(num!=0&amp;&amp;12/num==2)</span><br></pre></td></tr></table></figure>
<p>这样的写法在其它语言可能会有问题，有可能会算后面的式子报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(x++&lt;y||x+y&gt;20)</span><br></pre></td></tr></table></figure>
<p>这样的递增也会在逻辑运算符前兑现</p>
<ul>
<li><strong>选择运算符（？：）</strong></li>
</ul>
<p>挺有意思一简写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">回答=今天有30度吗？好热:还行；</span><br><span class="line">x=(y&lt;0)?-y:y;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>continue</strong></li>
</ul>
<p>用来跳过本次循环剩余的部分</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(A)&#123;</span><br><span class="line">    <span class="built_in">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">someting;</span><br><span class="line">//好像省了一个<span class="keyword">else</span></span><br><span class="line">//但是简单的判断逻辑，可以对条件取反</span><br><span class="line"><span class="keyword">if</span>(!A)&#123;</span><br><span class="line">    sometin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>while ：下一个行为是测试进入循环</p>
<p>for ：下一个行为是更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(count=0;count&lt;10;count++)&#123;</span><br><span class="line">    ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">continue</span>;</span><br><span class="line">    putchar(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这个会执行多少次呢</p>
<p>每有一个continue，都会先count++，然后判断</p>
<p>while就容易跳过++</p>
<ul>
<li><strong>多重选择</strong></li>
</ul>
<p>用switch和break，更方便</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">switch(A)&#123;</span><br><span class="line">    <span class="keyword">case</span> 1:satement 1;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 2:statement 2;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line">    default:statement 3;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line">//可以合并标签</span><br><span class="line">switch(A)&#123;</span><br><span class="line">    <span class="keyword">case</span> 1:</span><br><span class="line">    <span class="keyword">case</span> 2:statement 1;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line">    default:statement 2;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>学习笔记</tag>
        <tag>分支</tag>
        <tag>ctype.h</tag>
      </tags>
  </entry>
  <entry>
    <title>测试博客</title>
    <url>/2021/02047266.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ccfb5af6b6f06ad40de553d794ffe50deddc72627455d811df3aca8722b3548c">10d79030e8222445804370796b90fca1a366f94c0eb92e3bbac3ce983d3a5618b9289e0e9c16e9971918130234bd2b13ba0b07f9a3e4a407ee5713865e4786ce80e22a4802c297444fda31173ec49e66f0ed916b4a19f62960184db4960a4c6ae15652b5998d9843e56eccb1a2aa4257eb2a09edb784af3b09b38036c992fab8fe7c70ebb690ba8aaf355dc5448fab2295368fb70ce1441a4f692820bbb51467d5e3323ee0656ef05fdf5823964494965850354760e5d1d89e51bfb4f59cfbfeade076eae16403f0901a0dead08aa4268c8c7ed6ef2f97a19f0c26fa2b4648607eafe872e9b9361be976cfe11e316ee2756ec74bd0e0a15271e70b53ed254b709252064045ec159ff578ed80c64096942c9e9892176054ca20faa984fdf0712901ab61fdc435453f27a725354f8cf75dcf1ea4f7982ebc3bfcc14118e26d6e7d42047d1a618d0c1bc595328b839ecae81cab9838e97de7c3ad6080702d6a4e90053b0fa888996c64fbde6a60bd86a50748df43ea9501a6dbaf14b6e46cb5ec5ed061e6bb2228bdfb66bf25362391663b50f12254a6253fbdb2004b2eff8f265e528e347fbd9658428415525224ca98377daa9322dd94418aac9d0636636bbcd33fef11ac998bce4aa58e76477875b7832358c3b1827efce3b6897638aae9095e95f70df7b2f22cc68f8134f225741fbd61f9eebc7c38b1b4c480a2f4c746240bffc39ee89fe2de5980ee703f8eeca0163f320ff79850f47bbc08f46ef02b9f64d059ba969a24994c755bcd29fd22e606bb49cf47017ea604fd43f2acc8e9d0851aea83e2742e9d1258d30d83106c9f92665ffddecb3fece018463af2b0084def26060825d25e48dab0df7629e8d33c1f04348f266b08125f3bf838bc49146f4ed95cfe39f05375dd97bd24aa7bfde13a160f98de7d89aaa0e8dec4d86cc8898049e7500e41d4a77eb93673467888fa67a0720c4bbb491769f48285d40615ee76f6c1ae5aabf9f2f0afb8108f49f3de74642c08c26a7ea04a98603630866f43d5a921bd78568ca77a01ecce071cbdaed8d07a8fd6c94cd0ffcf06f0de333f3e372c77467f4738bf1009faccc477c4d844b39562e41b76f87119d3374a53c134399c12b1c6c29ef1ec147f45ffc256ca656f049452f1733a175c395e86d6d84bb9e0f77d6ae5df29d34f03242dcee12612d8b83f50293cadbb3c7a69fe1e6e352c9781f6a9d690dab0f042f8c60db562ffef6c983f11e3d0f3626d7626f11d86405f5b315e87383b01a8a0d944c34891c8b55517f662d57f7d8531e6b029c418e582a45ce7ea38b6b995e38a069a26f3d6ab90ef04439f194a8a2bc1ebe64796c2bdc57e51ddbc324d0ee8cce56d0d77e79784d872fd96aeda103abd3dcb2f362a2c3c83324afdd4e8add0e8b6a1029e801ce9e8fd1b523d9c5f53feb72498003d4482662987b38dc6b8352a9dc8435f59a07783d9684a07a3d96a27b8b5d2a99b40f7785acf63d1f0aee9e0d01bf0926fea7b1e5ff59446d175ad4bbd091d14d8b9db9774e1ede6bfc03be3fd376f39ab446c527dec23360fdadcc6f3d37c2eed213dccf930154d16a3897d456db70b6a9ef7b24d6c963a2324c0882612dce2aaf1e1b928e75af62456faad833e6d3e36847411143400c38cd4e9e47a4c373964c369c8eb0eab947c0449246796b0c78c3378d897cd54a3327bc5bd2afb2d81866e3cfbe284002830cab884070772a6f63caae186f19731585e5a038c3b9062d7d4cb1038742d614c2d64cb3fc14218d59a702ced1ab7016f1858717e5faa07fa8913b8e0da118f5fa0e979bf8751e8ba84a46e441e7869d68f4cf6623ba14c6b8638ddf91ab8ca9b05d227ddf3274946460d190a5453f481ef2203734205f9011bf558ba9deadba2c930cee34e86da1c320a15708ed9dc1ad68772b6b8343b5e8d80fef48501805f7958f4db4d4ddd1b96bc2ca70202086e425050eab59b114060e02835a12cbb410ea67fae661e61cceb2ccca93e006915d7770ad3eb7164d932d8f896ebc6f95a641ab29d32d44fba31b12c9342cb38333a012bcfe03aeaba66d216a72817ef8116ea1aeb90f7d2770abec78d90e314c09df9c5394995605d00864e2c27d175b25fd7a88434854acf463fd3be81e99a043c4a27bd3b484caeae778affb4c1f7d9dac7773f093317dd9c626bee8f7e420abaf7a9db3e76897bb44080751e2beae8ffb5cdb1d37b412080ea0b042b7e21ae2da44fa48fae21e82cd090695aad997c02fc00498be2039ea22e1d88bf51acefa7a6c967f8c9deda3bb7dc432e4a317dcf914d3ebf07aedc7328ba94a68f42cc5845dbeebb7cbb85f93b6b156d92ba39fc5381160ad65571e60f5edbf9640483c3b0e7904307b7a26e7c509571a0c0c34268f13030a00f56da2efacefa86b630373f601962440a2373504ecbe913ddea12464420cf83a19d0c595fadf24a486bad6594045630f53940e880d678ee2c6e7e0797a1c1a48bc73bb12e11c52f95952960642db44e04605a6a6b3791c2cb4fa28daadf3266feb291a39778a7b81bbb7fde3e52e3f32f7d78353577737b7a5c042c2cd0a217f69436d2c36fc0f311ade8c73a44ead2b7423ff4351b1fdf5bdbf8937e9ff557de234884041064cdbeacb6f5bcd965a541bf46bfdea6645372c57bb7e7dde3b2806cb162f5310c8168bfbd432ad2e23af7d830e4c5831265453b0baccfe1d36c162fad1c655dd6718f11a1a993961ec3467bdba692e5192cce989f524e6f0bdabbb81d7b25e194081d105c72b5f37e0a46dbe02dd78a8401a6abc967c0989cd57ce96cf03c6d30c57a304745742a8f5eb410f809dababc27e017e09d324d37f82551e37f15d7996be23dee2d6b17408a128e10b5a39824238228a4922d50c1422757e9ca9667cf89e653f8c742597e51e6f2470bb0aa4aa5c97011c410d0059036bf124799f3afa9bb93716c68a98c70068c149c1357b86a98435ace03aa3fb12eb8665d595ab717ad6ac97db146d62a57a41923538f0a97c07c4bb39d72600d28b6b3f8448c976b318f88af7aac8e4fc9071e7561d2d44ac91793ca9704c6796e5fcb28927117101d4c395edf9f9629ce3beb643551a2300c108ee60b8655b6df91caf8d59131cc1c2567fdf64a0c292583f2d4a882411be20924715a1087e589e206b4a037975eae4893260f022aa5eb55caca31b3e1eea67487c2617b7f3229a359259e8a4be880e19574bc755da5f0a17fc5cf8d6015ac0ed79077755d832b2623e9717196564e12cbf48061f53d62b63167d6807ecf635fb36331b8f59db2ca5b7458b546de4ff239a008bcbdb322092f9c43dca2962bc0447366072572499cb23e5d0b4fbb370bdf147f17828c26d4bdb415142f135b175f298b5aca0680217d3bc5e3561949e42b61ffe2948588680e46f14be7ae742d04a7a8102af9a5cdb6e6ba6d6313c8b08c7c775d00d8e9da67d25089ee24631763a20b453b64e8d8a0d6539b03624d56d1b9e478a3457ddae49a226cacfc44edf252a01783e5a07ecde0fc22d3463024b330d6753708de1a424f63fab1c545e0651a7c7d22f23d15d27655c532c69a310057a02832b11a1e6de83b289294bc89aa5b4a51d4bf555b1f273eb72445770290768065035b6604f2cb98e2768c3bf3190d5b5e23feb3a34c395ddcc9952df493c1f582f45747cfecb2eb200ececd8d95d53a9a0d8b603d3845879e85354d87fec2b1bca2ca5a406fb91a24ab358ec0d1cf2b15bb4814db5c113d8b320efb33eacf89ec506c6e2874a472605a5f21cc4f0a4b620373aaee6b7051e461186ff83d0988b7964c2b139364a462cceac4b079f3badda116adc6fa2203e78e7a70d6c9c83e58be25a2a584d542912e66075183dd838edec62158</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-up">
      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-up">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>博客建立</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
