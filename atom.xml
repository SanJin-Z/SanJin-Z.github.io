<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>三金的博客</title>
  
  <subtitle>技术-思考-生活</subtitle>
  <link href="https://sanjin-z.github.io/atom.xml" rel="self"/>
  
  <link href="https://sanjin-z.github.io/"/>
  <updated>2021-03-09T01:24:10.624Z</updated>
  <id>https://sanjin-z.github.io/</id>
  
  <author>
    <name>SanJin-Z</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言学习笔记2</title>
    <link href="https://sanjin-z.github.io/2021/030850316.html"/>
    <id>https://sanjin-z.github.io/2021/030850316.html</id>
    <published>2021-03-08T08:06:07.000Z</published>
    <updated>2021-03-09T01:24:10.624Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><font size=4>---摘要：C语言学习个人向记录-输入输出验证---</font></p><a id="more"></a><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h2><p>以前的C对于函数参数规定的不细，你可以不标形参类型，容易造成混乱</p><p>有时候我们可以这么来用，小函数写在前面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//既是函数定义，也是函数原型</span><br><span class="line">int imax(int a,int b)&#123;<span class="built_in">return</span> a&gt;b?a:b;&#125;</span><br><span class="line">int main(viod)</span><br><span class="line">&#123;</span><br><span class="line">    something;//主函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归recurion"><a href="#递归recurion" class="headerlink" title="递归recurion"></a>递归recurion</h2><p>递归没有循环效率高，但胜在简洁</p><p>来个例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/* recur.c ---循环示例 */</span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line">void up_and_down(int n);</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    up_and_down(1);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line">void up_and_down(int n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Level %d : n location %p\n&quot;</span>,n,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n&lt;4)</span><br><span class="line">    &#123;</span><br><span class="line">        up_and_down(n+1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;LEVEL %d : n location %p\n&quot;</span>,n,&amp;n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出结果</span><br><span class="line">Level 1 : n location 000000000061FE00</span><br><span class="line">Level 2 : n location 000000000061FDD0</span><br><span class="line">Level 3 : n location 000000000061FDA0</span><br><span class="line">Level 4 : n location 000000000061FD70</span><br><span class="line">LEVEL 4 : n location 000000000061FD70</span><br><span class="line">LEVEL 3 : n location 000000000061FDA0</span><br><span class="line">LEVEL 2 : n location 000000000061FDD0</span><br><span class="line">LEVEL 1 : n location 000000000061FE00</span><br></pre></td></tr></table></figure><p>可以看出，在相反顺序任务中这样的调用后语句很有用</p><h2 id="编译多源代码文件的程序"><a href="#编译多源代码文件的程序" class="headerlink" title="编译多源代码文件的程序"></a>编译多源代码文件的程序</h2><p>vsc支持似乎不太好，暂时不研究了</p><h2 id="指针-pointer-amp-与"><a href="#指针-pointer-amp-与" class="headerlink" title="指针   pointer   &amp;与*"></a>指针   pointer   &amp;与*</h2><p>&amp;：指向某指针<br>*：解指向运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ptr=&amp;bah;//将ptr“指向”bah</span><br><span class="line">val=*ptr;//将ptr“指向”地址的值提取出来</span><br></pre></td></tr></table></figure><p>声明指针：int * pi ;</p><p>指针：&amp;pi</p><p>解指针：*ppi    </p>]]></content>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;&lt;font size=4&gt;---摘要：C语言学习个人向记录-输入输出验证---&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言学习" scheme="https://sanjin-z.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C语言" scheme="https://sanjin-z.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="学习笔记" scheme="https://sanjin-z.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="递归" scheme="https://sanjin-z.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="指针" scheme="https://sanjin-z.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>C语言学习笔记1</title>
    <link href="https://sanjin-z.github.io/2021/030550635.html"/>
    <id>https://sanjin-z.github.io/2021/030550635.html</id>
    <published>2021-03-05T06:28:16.000Z</published>
    <updated>2021-03-08T08:04:52.395Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><font size=4>---摘要：C语言学习个人向记录-输入输出验证---</font></p><a id="more"></a># 2021/3/5 输入输出--通用I/O函数<h2 id="单字符I-O"><a href="#单字符I-O" class="headerlink" title="单字符I/O"></a>单字符I/O</h2><h2 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h2><p>缓冲输入–缓冲区–使用</p><p>无缓冲输入–直接使用</p><p>UNIX和IBM等使用无缓冲的方法不一样，还是常用缓冲</p><h2 id="结束键盘输入"><a href="#结束键盘输入" class="headerlink" title="结束键盘输入"></a>结束键盘输入</h2><h3 id="文件、流和键盘输入"><a href="#文件、流和键盘输入" class="headerlink" title="文件、流和键盘输入"></a>文件、流和键盘输入</h3><p>file在各个系统不一致</p><p>low-level I/O不好用，没必要搞标准库</p><p>standard I/O package  最终用这个统一的</p><p>不一致性：</p><p>有些系统吧文件信息放一边，文件放另一边</p><p>有些系统用换行符换行，有些用回车+换行</p><p>stream 流，数据流，没看懂</p><p>目前的理解，屏幕输出是程序运行的“副产物”，键盘输入是文件写入</p><p>既然键盘输入是文件写入，那么一定能结束文件</p><h3 id="文件结尾"><a href="#文件结尾" class="headerlink" title="文件结尾"></a>文件结尾</h3><p>getchar()这个函数，是识别输入-1为结尾的</p><p>char类型没有-1，无所谓</p><p>但是getchar实际上会出int类型的值</p><p>EOF是内定文件结尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int ch;</span><br><span class="line"><span class="keyword">while</span>((ch=getchar())!=EOF)</span><br></pre></td></tr></table></figure><h2 id="重定向和文件"><a href="#重定向和文件" class="headerlink" title="重定向和文件"></a>重定向和文件</h2><p>不止可以用键盘输入，什么磁带，穿孔卡片，语音都可以</p><p>更多的，从其它文件</p><p>打开，读取，写入，关闭文件</p><p>也可以重新定向</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210305173439.png" width = "600" height = "" alt="20210305173439" align=center /><p>成功了，程序+空格+&lt;+空格+文件名就行</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210305173751.png" width = "600" height = "" alt="20210305173751" align=center /><p>OMG，我居然用程序创造了一个文件</p><p>似乎在使用电脑的历史中我总是用别人的程序创造文件</p><p>所以自己写的程序创造了一个文件感觉很特别</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210305174217.png" width = "600" height = "" alt="20210305174217" align=center /><p>利用组合重定向复制一个文件</p><p>定向输入和输出的顺序无关紧要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdbool.h&gt;</span></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int ch;</span><br><span class="line">    <span class="keyword">while</span> ((ch=getchar())!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        putchar(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好家伙，用代码替代刚才那些操作就要用到新的函数了</p><ul><li><strong>fopen()</strong></li></ul><p>新的类型 FILE * fp</p><p>fp=fopen(filename,”r”);</p><p>文件使用方式由r,w,a,t,b，+六个字符拼成，各字符的含义是：</p><p>r(read): 只读</p><p>w(write): 只写</p><p>a(append): 追加</p><p>t(text): 文本文件，可省略不写</p><p>b(binary): 二进制文件</p><p>+: 读和写</p><p>代码，逐字复制一个文本文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int ch;</span><br><span class="line">    FILE * fp;</span><br><span class="line">    char fname[50];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the name of the file:&quot;</span>);</span><br><span class="line">    scanf(<span class="string">&quot;%s&quot;</span>,fname);</span><br><span class="line">    fp=fopen(fname,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp==NULL)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line">        //<span class="built_in">exit</span>(1);</span><br><span class="line">    &#125;</span><br><span class="line">//从打开文件弄个字符用函数getc（）</span><br><span class="line">    <span class="keyword">while</span>((ch=getc(fp))!=EOF)</span><br><span class="line">        &#123;</span><br><span class="line">            putchar(ch);</span><br><span class="line">        &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更友好的输入"><a href="#更友好的输入" class="headerlink" title="更友好的输入"></a>更友好的输入</h2><p>有一个很诡异的事儿</p><p>就是输入的东西会进一个缓冲队列</p><p>读一个字符，后面的字符还在队列里</p><p>比如说，你用键盘输入一个1+Enter</p><p>实际上’1’+’\n’都被存入，你就相当于输入两个字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//基本上你需要在循环里加上这个，跳过其他输入</span><br><span class="line"><span class="keyword">while</span>(getchar()!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="built_in">continue</span>;</span><br></pre></td></tr></table></figure><p>注意getchar()和scanf()的区别</p><p>scanf用来读数值，会跳过换行符，空格和制表符</p><ul><li>跳过输入中不需要的部分</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">char get_first(void)</span><br><span class="line">&#123;</span><br><span class="line">    int ch;</span><br><span class="line">    ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(getchar()!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">continue</span>;</span><br><span class="line">    <span class="built_in">return</span> ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于输入界面的内容，可以总结到这个程序当中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">/* menuette.c ---菜单程序 */</span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line">char get_char(void);</span><br><span class="line">char get_first(void);</span><br><span class="line">void count(void);</span><br><span class="line">int get_int(void);</span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line">    int choice;</span><br><span class="line">    <span class="keyword">while</span> ((choice=get_char())!=<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        switch (choice)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;高买低卖\n&quot;</span>);</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            putchar(<span class="string">&#x27;\a&#x27;</span>);//ANSI</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:count();</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        default:<span class="built_in">printf</span>(<span class="string">&quot;Program error!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bye.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line">char get_char(void)</span><br><span class="line">&#123;</span><br><span class="line">    int ch;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the letter of your choice:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a.advice        b.bell\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c.count         q.quit\n&quot;</span>);</span><br><span class="line">    ch=get_first();</span><br><span class="line">    <span class="keyword">while</span>((ch&lt;<span class="string">&#x27;a&#x27;</span>||ch&gt;<span class="string">&#x27;c&#x27;</span>)&amp;&amp;ch!=<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入a，b，c或者q退出，别瞎搞\n&quot;</span>);</span><br><span class="line">        ch=get_first();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char get_first(void)</span><br><span class="line">&#123;</span><br><span class="line">    int ch;</span><br><span class="line">    ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(getchar()!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">continue</span>;</span><br><span class="line">    <span class="built_in">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void count(void)</span><br><span class="line">&#123;</span><br><span class="line">    int n,i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入一个整数，然后报数\n&quot;</span>);</span><br><span class="line">    n=get_int();</span><br><span class="line">    <span class="keyword">for</span>(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(getchar()!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int get_int(void)</span><br><span class="line">&#123;</span><br><span class="line">    int input;</span><br><span class="line">    char ch;</span><br><span class="line">    <span class="keyword">while</span>((scanf(<span class="string">&quot;%d&quot;</span>,&amp;input))!=1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>((ch=getchar())!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            putchar(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不是一个整数\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;整数什么样不知道，12，342,3这种：\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;&lt;font size=4&gt;---摘要：C语言学习个人向记录-输入输出验证---&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言学习" scheme="https://sanjin-z.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C语言" scheme="https://sanjin-z.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="学习笔记" scheme="https://sanjin-z.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="输入输出" scheme="https://sanjin-z.github.io/tags/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    
    <category term="fopen" scheme="https://sanjin-z.github.io/tags/fopen/"/>
    
    <category term="重定向" scheme="https://sanjin-z.github.io/tags/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>C语言学习笔记0</title>
    <link href="https://sanjin-z.github.io/2021/03011290.html"/>
    <id>https://sanjin-z.github.io/2021/03011290.html</id>
    <published>2021-03-01T12:47:12.000Z</published>
    <updated>2021-03-08T08:08:01.318Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><font size=4>---摘要：C语言学习个人向记录---</font></p><a id="more"></a><h1 id="学习目的"><a href="#学习目的" class="headerlink" title="学习目的"></a>学习目的</h1><p>第一篇笔记记一下学习目的</p><p>BIMer成天和软件打交道，一定会发现软件的限制</p><p>这种时候应该将软件工作托付专业人士</p><p>奈何并没有这么简单</p><p>建筑行业工具软件市场没有那么发达</p><p>BIM作为一个大<del>泡沫</del>行业尚处于混沌状态</p><p>二次开发这种建筑工程设计与软件工程<strong>灰色地带</strong>的行当就自然出现</p><p>为什么说是行当，故意的，因为这甚至不能当做一个正经行业</p><p>软件工程本身不挣钱，懂得都懂</p><p>建筑设计本身也不值钱，懂得也都懂</p><p>二次开发叠了两个头秃行业的buff。。。</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210301205942.png" width = "300" height = "" alt="20210301205942" align=center /><p>本身又没有靠谱的商业模式（橄榄山老板是个零几年就搞Revit二次开发的大神，可是有多少公司会为橄榄山付费呢）</p><p>可以说比较尴尬</p><p>然而很多时候尚处于行业开拓期的人们就是要自己想办法</p><p>没有那么多银弹，或者突然冒出来KILLER级别的东西给你用</p><p>好的铁匠会给自己打把好锤子</p><p>迪士尼的动画实验室是世界顶级的图形学实验室</p><p>华为会给自家手机设计旗舰芯片</p><p>国产替代这两年基本上从概念走向商业价值</p><p>大家还是不能只看见人家吃肉，对吧</p><h1 id="学习思路"><a href="#学习思路" class="headerlink" title="学习思路"></a>学习思路</h1><p>还是把应用部分放到C#上</p><p>C语言看一遍就溜</p><p>不做详尽笔记，脑图这些，网上到处都是</p><p>零散记下收获，有机会再整理</p><h1 id="2021-3-1"><a href="#2021-3-1" class="headerlink" title="2021/3/1"></a>2021/3/1</h1><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>getchar()/putchar()</p><p>不需要转换说明，stdio.h头文件中</p><p>while((ch=getchar())!=\n’){</p><p>something;</p><p>}</p><p>读取每个字符并操作，直到空格</p><ul><li><strong>新的库</strong></li></ul><p>#include&lt;ctype.h&gt;</p><p>isalpha() // 如果是一个字符，返回一个非零值</p><p>tolower() 大写改小写</p><ul><li><strong>isal系列</strong></li></ul><p>isalnum/isalpha/isblank/iscntrl/isdigit/isgraph/islower/isprint/ispunct/isspace/isupper/isxdigit</p><p>字母或数字/字母/标准空白（空格、水平制表符、换行）/ctrl+/数字/除空格之外的任何可打印字符/小写/可打印字符/标点符号/空白/大写/十六进制数字</p><ul><li><p><strong>if else的匹配问题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if（）</span><br><span class="line">  if()</span><br><span class="line">    sth;</span><br><span class="line">else</span><br><span class="line">  sth;</span><br></pre></td></tr></table></figure><p>没有花括号，if会和最近的else匹配，缩进被忽略了</p></li><li><p><strong>标记（flag）</strong></p></li></ul><p>举了一个算因数的例子</p><p>我来抄一下代码，半抄半写吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//divisors.c  --使用嵌套算约数</span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdbool.h&gt;</span></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    unsigned long num; //待判断的素数</span><br><span class="line">    bool isPrime;</span><br><span class="line">    unsigned long i; //可能的约数</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输整数，输别的退出&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>((scanf(<span class="string">&quot;%lu&quot;</span>,&amp;num))==1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=2,isPrime=<span class="literal">true</span>;(i*i)&lt;=num;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i*i==num)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;唯一约数%lu&quot;</span>,i);</span><br><span class="line">                isPrime=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num%i==0)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;俩约数%lu，%lu&quot;</span>,i,num/i);</span><br><span class="line">                isPrime=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isPrime)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;好家伙，素数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面的isPrime就是一个flag</p><p>放在for的第一个分号前保证刷新</p><ul><li><strong>逻辑运算</strong></li></ul><p>&amp;&amp; || ! </p><p>记住优先级，非&gt;与&gt;或</p><p>序列点，副作用兑现，顺序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(num!=0&amp;&amp;12/num==2)</span><br></pre></td></tr></table></figure><p>这样的写法在其它语言可能会有问题，有可能会算后面的式子报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(x++&lt;y||x+y&gt;20)</span><br></pre></td></tr></table></figure><p>这样的递增也会在逻辑运算符前兑现</p><ul><li><strong>选择运算符（？：）</strong></li></ul><p>挺有意思一简写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">回答=今天有30度吗？好热:还行；</span><br><span class="line">x=(y&lt;0)?-y:y;</span><br></pre></td></tr></table></figure><ul><li><strong>continue</strong></li></ul><p>用来跳过本次循环剩余的部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(A)&#123;</span><br><span class="line">    <span class="built_in">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">someting;</span><br><span class="line">//好像省了一个<span class="keyword">else</span></span><br><span class="line">//但是简单的判断逻辑，可以对条件取反</span><br><span class="line"><span class="keyword">if</span>(!A)&#123;</span><br><span class="line">    sometin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while ：下一个行为是测试进入循环</p><p>for ：下一个行为是更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(count=0;count&lt;10;count++)&#123;</span><br><span class="line">    ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">continue</span>;</span><br><span class="line">    putchar(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个会执行多少次呢</p><p>每有一个continue，都会先count++，然后判断</p><p>while就容易跳过++</p><ul><li><strong>多重选择</strong></li></ul><p>用switch和break，更方便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">switch(A)&#123;</span><br><span class="line">    <span class="keyword">case</span> 1:satement 1;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 2:statement 2;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line">    default:statement 3;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line">//可以合并标签</span><br><span class="line">switch(A)&#123;</span><br><span class="line">    <span class="keyword">case</span> 1:</span><br><span class="line">    <span class="keyword">case</span> 2:statement 1;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line">    default:statement 2;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;&lt;font size=4&gt;---摘要：C语言学习个人向记录---&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言学习" scheme="https://sanjin-z.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C语言" scheme="https://sanjin-z.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="学习笔记" scheme="https://sanjin-z.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="分支" scheme="https://sanjin-z.github.io/tags/%E5%88%86%E6%94%AF/"/>
    
    <category term="ctype.h" scheme="https://sanjin-z.github.io/tags/ctype-h/"/>
    
  </entry>
  
  <entry>
    <title>Revit快速上手（2）--必须学习的10个操作</title>
    <link href="https://sanjin-z.github.io/2021/022657324.html"/>
    <id>https://sanjin-z.github.io/2021/022657324.html</id>
    <published>2021-02-26T03:30:21.000Z</published>
    <updated>2021-02-28T08:20:48.847Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><font size=4>---摘要：Revit纯新手快速上手-基本操作---</font></p><a id="more"></a><h1 id="链接CAD"><a href="#链接CAD" class="headerlink" title="链接CAD"></a>链接CAD</h1><p>CAD图纸大的好几十兆，一股脑链接可不行，需要前处理</p><p><font color=red><strong>删掉不需要的部分</strong></font></p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226153830.png" width = "600" height = "" alt="20210226153830" align=center /><p>仅保留你想在这一层看到的部分</p><p>图框，填充删掉</p><p><font color=red><strong>炸开图块保存t3</strong></font></p><p>轴网底图之类的图块最好炸开</p><p>保存t3格式防止不识别</p><p>最好将所有参考图纸放在一个文件夹（转交给其他人的时候方便）</p><p><font color=red><strong>链接设置</strong></font></p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226154843.png" width = "600" height = "" alt="20210226154843" align=center /><ul><li><input disabled="" type="checkbox"> 仅当前视图：勾上，这样它就不会出现在别的视图干扰你</li></ul><p>导入单位：设为毫米，有时候会自动检测不成功</p><p>定位：如果CAD原点和Revit基点差距过大，可以使用手动定位</p><h1 id="调整界面颜色"><a href="#调整界面颜色" class="headerlink" title="调整界面颜色"></a>调整界面颜色</h1><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226155353.png" width = "300" height = "" alt="20210226155353" align=center /><p>文件–→选项–→图形</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226155513.png" width = "600" height = "" alt="20210226155513" align=center /><p>深色背景下线条更容易看清</p><h1 id="调整画面精度和渲染模式"><a href="#调整画面精度和渲染模式" class="headerlink" title="调整画面精度和渲染模式"></a>调整画面精度和渲染模式</h1><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226161544.png" width = "600" height = "" alt="20210226161544" align=center /><p>底边栏左下角可调整</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226161657.png" width = "300" height = "" alt="20210226161657" align=center /><p>旁边调整显示模式，画图时调成<strong>着色</strong></p><h1 id="调整细线"><a href="#调整细线" class="headerlink" title="调整细线"></a>调整细线</h1><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226160104.png" width = "300" height = "" alt="20210226160104" align=center /><p>绘制的时候一般不看线宽，调整为细线</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226160248.png" width = "600" height = "" alt="20210226160248" align=center /><p>点这里即可</p><h1 id="选取–过滤器"><a href="#选取–过滤器" class="headerlink" title="选取–过滤器"></a>选取–过滤器</h1><p>当我想删掉视图中所有的参考线就要先选中所有的“线”，那么如何过滤出来呢</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226171347.png" width = "600" height = "" alt="20210226171347" align=center /><p>框选所有东西，点击“过滤器”，勾选你要的类别即可</p><p>有时候需要更精细的过滤，这个需要插件实现：</p><p><a href="http://www.hwbim.com/Modeling/index.html" target="红瓦官网">红瓦的建模大师–免费</a></p><p><a href="http://www.glsbim.com/nav/11.html" target="橄榄山官网">橄榄山插件–部分功能免费</a></p><h1 id="层间复制"><a href="#层间复制" class="headerlink" title="层间复制"></a>层间复制</h1><p>平面复制（CO）都知道不说了</p><p>层间复制如下图，选中→复制到剪贴板→与选定标高对齐</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226172856.png" width = "600" height = "" alt="20210226172856" align=center /><h1 id="模型组"><a href="#模型组" class="headerlink" title="模型组"></a>模型组</h1><p>类似SU的组件功能，配合层间复制使用</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226183755.png" width = "600" height = "" alt="20210226183755" align=center /><p>不过<strong>组</strong>太多容易卡</p><p>组内编辑（双击组），所有<strong>组</strong>都会改变，也会导致CPU占有率瞬间拉满，建议组做好了再复制</p><h1 id="修剪（TR）与对齐（AL）"><a href="#修剪（TR）与对齐（AL）" class="headerlink" title="修剪（TR）与对齐（AL）"></a>修剪（TR）与对齐（AL）</h1><p>修剪快捷键TR，常用命令，修剪墙/修剪线/修剪管道，用处非常多</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/修剪.gif" width = "600" height = "" alt="修剪" align=center /><p>对齐快捷键(AL)，又一个常用命令，构件一般有位置参照，对齐比移动用的多</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/对齐.gif" width = "600" height = "" alt="对齐" align=center /><h1 id="创建类似实例"><a href="#创建类似实例" class="headerlink" title="创建类似实例"></a>创建类似实例</h1><p>当你已经有一堵墙，你会怎么画类似的墙</p><p>从建筑选项卡下找到“墙”？</p><p>背快捷键WA？</p><p>还是复制？</p><p>都可以，这些方法，但实际上最快最通用的方法是</p><p>选中物体，右键，<strong>创建类似实例</strong></p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228161948.png" width = "300" height = "" alt="20210228161948" align=center /><p>这个方法相当通用，应当优先掌握</p><h1 id="视图范围"><a href="#视图范围" class="headerlink" title="视图范围"></a>视图范围</h1><p>我们都知道平面图是俯视楼层得到的，那么到底是俯视楼层的哪个高度得到的呢，最高处？</p><p>啊，这个说起来还有些复杂</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226191141.png" width = "600" height = "" alt="20210226191141" align=center /><p>毕竟点开视图属性栏的<strong>视图范围</strong>，里面竟然有这么多参数</p><p>我们还是看看<a href="http://help.autodesk.com/view/RVT/2018/CHS/?guid=GUID-58711292-AB78-4C8F-BAA1-0855DDB518BF" target="帮助">帮助文档</a></p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226191044.png" width = "" height = "" alt="20210226191044" align=center /><p>简单理解一下，<strong>顶部</strong>高度到<strong>底部</strong>高度是我们的主要视图范围，也就是蓝色区域</p><p>如果你画了一盏灯，提示你图元在本视图不可见，调节一下<strong>顶部</strong>偏移</p><p>黄色区域能够看到，但是颜色更淡，不能选中</p><p>如果你发现你在一层画图，但是被地下一层的管道干扰了，可以调调第四个参数，让它等于<strong>底部</strong></p><hr><p>ok，十个必学操作介绍完毕</p><p>当然，其实这些操作各种教程都有</p><p>然而这是设计师们刚开始用Revit正向设计最常遇到的一些问题</p><p>背后有一定的共性，上手中遇到什么其他问题，欢迎评论区交流</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226193124.png" width = "300" height = "" alt="20210226193124" align=center />]]></content>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;&lt;font size=4&gt;---摘要：Revit纯新手快速上手-基本操作---&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="正向设计合集" scheme="https://sanjin-z.github.io/categories/%E6%AD%A3%E5%90%91%E8%AE%BE%E8%AE%A1%E5%90%88%E9%9B%86/"/>
    
    
    <category term="Revit" scheme="https://sanjin-z.github.io/tags/Revit/"/>
    
    <category term="软件操作" scheme="https://sanjin-z.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
    <category term="10个小技巧" scheme="https://sanjin-z.github.io/tags/10%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Revit快速上手（4）--机电</title>
    <link href="https://sanjin-z.github.io/2021/022552444.html"/>
    <id>https://sanjin-z.github.io/2021/022552444.html</id>
    <published>2021-02-25T04:55:21.000Z</published>
    <updated>2021-02-28T11:09:32.560Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><font size=4>---摘要：Revit纯新手快速上手-机电上手---</font></p><a id="more"></a><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>建筑结构专业使用Revit，上手很简单</p><p>建筑专业不说了，三维软件多少都得玩儿，SU啊，犀牛啊，ArchiCAD</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228153721.png" width = "600" height = "" alt="20210228153721" align=center /><p>结构专业一般的结构体系不会很复杂，构件种类无非是梁板柱墙，形状规整（钢结构另说，那个也不用Revit）</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228153917.png" width = "600" height = "" alt="20210228153917" align=center /><p>然而到水暖电三个专业就麻烦很多，管道，设备，管件，连接，各种仪表，电气专业的各种末端，林林总总</p><p>这个上手就有一定难度了，值得单独写</p><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>那就先从管道开始</p><p>在Revit中，管道-桥架-风管，都被认为是<strong>基于线绘制</strong>的特殊族</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228154809.png" width = "600" height = "" alt="20210228154809" align=center /><p>点击<strong>管道</strong>，平面上画线就能生成管道</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228154634.png" width = "300" height = "" alt="20210228154634" align=center /><p>我们关注的信息在“属性”栏均有体现</p><h2 id="管道类型"><a href="#管道类型" class="headerlink" title="管道类型"></a>管道类型</h2><p>这其中常常需要调整的就是<strong>管道类型</strong></p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228155110.png" width = "300" height = "" alt="20210228155110" align=center /><p>属性栏点击<strong>编辑类型</strong>，可以看到是一个<strong>族属性</strong>的界面</p><p>点击<strong>布管系统配置</strong></p><p>有管段材质，连接件，末端等设置</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228155247.png" width = "300" height = "" alt="20210228155247" align=center /><p>这部分就和设计说明里的管材-连接一个意思</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228155625.png" width = "600" height = "" alt="20210228155625" align=center /><p><strong>管道类型应尽可能规范下来，保证模型一致性</strong></p><pre><code>桥架、风管也有类似类型设置</code></pre><h2 id="系统类型"><a href="#系统类型" class="headerlink" title="系统类型"></a>系统类型</h2><p><strong>系统类型</strong>之前讲视图控制的文章中有提到</p><p>这个概念很好理解，同样的镀锌钢管，有的是给水管，有的是消防管，还是要用颜色区分一下的</p><h2 id="坡度"><a href="#坡度" class="headerlink" title="坡度"></a>坡度</h2><p>刚绘制时常常被忽略的参数</p><p>水平管是不能被很好的转成坡度管的</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228162258.png" width = "600" height = "" alt="20210228162258" align=center /><p>因为一根管两端高度变化，相连管高度应该随之变化吗，需要维持坡度吗，还是应该断开</p><p>因此Revit中水平管高度总是同升同降</p><p>但是仅支持两端没有连接的管道更改坡度</p><p>我们需要在绘制的时候就按坡度绘制，避免<strong>重画</strong>！！</p><p>坡度管按坡度从高到低，或者从低到高绘制</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/绘制坡度管.gif" width = "600" height = "" alt="绘制坡度管" align=center /><p>尽可能一次绘制完主管</p><p>支管和主管连接要考虑高度问题</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228174736.png" width = "300" height = "" alt="20210228174736" align=center /><p>这样是连接不上的</p><p>正确方法是使用上面的GIF里的操作</p><p>绘制时点击<strong>继承高程</strong>，然后从主管往外绘制，这样保证了新管道绘制的起点主管在这一点的高度</p><p>避免了新绘制管道与原有管道错开</p><h2 id="管件"><a href="#管件" class="headerlink" title="管件"></a>管件</h2><p>风管，水管，桥架都有管件</p><p>相信你已经知道选中管件，旁边的“+”号点击一下就会多一个支路（当然最多也就四通）</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228184413.png" width = "300" height = "" alt="20210228184413" align=center /><h2 id="设备连接管道"><a href="#设备连接管道" class="headerlink" title="设备连接管道"></a>设备连接管道</h2><p>消火栓箱为例</p><p>连接到管道的设备会明显的变色</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228185318.png" width = "300" height = "" alt="20210228185318" align=center /><p>连接的方式有几种</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228185529.png" width = "300" height = "" alt="20210228185529" align=center /><p>可以点+号从设备建立管道</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228185856.png" width = "600" height = "" alt="20210228185856" align=center /><p>也可以使用<strong>连接到</strong>命令</p><h1 id="风管"><a href="#风管" class="headerlink" title="风管"></a>风管</h1><p>风管的绘制与水管没有本质区别</p><p>连接方式则多种多样</p><p>导致连接件形状多样</p><p>偏心的，顶平底平的，插接的，来回弯</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228181040.png" width = "300" height = "" alt="20210228181040" align=center /><p>而偏偏风管尺寸往往不小，形状上不精确</p><p>后面安装就很可能会遇到问题</p><p>这种时候就需要有好用的族</p><p>先绘制好管道，调整高度对齐，选择合适的族，将管道与管件连接</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/风管连接.gif" width = "" height = "" alt="风管连接" align=center /><p>当然，插件上会有更好用的一键连接，比如鸿业，以后可能专门测一下哪家好用写篇文章，这里就不写了，插件迭代速度快，时效性不强</p><h1 id="电气"><a href="#电气" class="headerlink" title="电气"></a>电气</h1><p>电气基本在施工图阶段，画电气设备与桥架这两样东西</p><p>都还比较好处理</p><p>电气末端，线管，导线繁多，又主要由精装人员控制，建模一般不需要电气设计师</p><p>但是相应的，电气所需要的系统图Revit没有办法很智能的生成，目前三维软件干二维的活效率最多和二维打平</p><hr><p>机电上手需要的基本就在这儿，溜了XDM</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210228183903.png" width = "300" height = "" alt="20210228183903" align=center />]]></content>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;&lt;font size=4&gt;---摘要：Revit纯新手快速上手-机电上手---&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="正向设计合集" scheme="https://sanjin-z.github.io/categories/%E6%AD%A3%E5%90%91%E8%AE%BE%E8%AE%A1%E5%90%88%E9%9B%86/"/>
    
    
    <category term="Revit" scheme="https://sanjin-z.github.io/tags/Revit/"/>
    
    <category term="软件操作" scheme="https://sanjin-z.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
    <category term="水暖电" scheme="https://sanjin-z.github.io/tags/%E6%B0%B4%E6%9A%96%E7%94%B5/"/>
    
    <category term="管道，设备" scheme="https://sanjin-z.github.io/tags/%E7%AE%A1%E9%81%93%EF%BC%8C%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>Revit快速上手（3）--视图控制</title>
    <link href="https://sanjin-z.github.io/2021/022528936.html"/>
    <id>https://sanjin-z.github.io/2021/022528936.html</id>
    <published>2021-02-25T04:55:21.000Z</published>
    <updated>2021-02-28T05:11:40.272Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><font size=4>---摘要：Revit纯新手快速上手-视图控制---</font></p><a id="more"></a><h1 id="上手的障碍"><a href="#上手的障碍" class="headerlink" title="上手的障碍"></a>上手的障碍</h1><p>开始建模上手的时候，总会出现：看不到xxx了，怎么关掉xxx，我能在这里看到xxx在那里看不到，图里的xxx重叠了诸如此类的麻烦</p><p>由于Revit会将所有要用的元素集合起来，如果不加控制，那么：</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225192513.png" width = "600" height = "" alt="20210225192513" align=center /><p>啊，这~~~ 地铁、老人、手机.jpg，就这还没建筑结构模型的遮挡</p><h1 id="可见性设置"><a href="#可见性设置" class="headerlink" title="可见性设置"></a>可见性设置</h1><p>CAD是如何处理这种情况的呢</p><p>装饰装修设计用布局来画图，将总模型中不需要的部分隐掉，每个“窗口”只展示需要的部分</p><p>ok，思路来了，我们选择性的隐掉部分构件，快捷键vv</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225202926.png" width = "300" height = "" alt="20210225202926" align=center /><p>关掉不需要的族类别，比如上图这样</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225202436.png" width = "600" height = "" alt="20210225202436" align=center /><p>不同专业设置好了之后，就如上图</p><h1 id="视图样板"><a href="#视图样板" class="headerlink" title="视图样板"></a>视图样板</h1><p>每次新开一个视图，都需要重新设置吗？</p><p>并不是，关于视图可见性的设置可以从本视图保存为视图样板，其他视图可以使用</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225204230.png" width = "600" height = "" alt="20210225204230" align=center /><p>点击空白处，左边的属性栏会显示视图属性，挑选已有的视图样板</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225204359.png" width = "600" height = "" alt="20210225204359" align=center /><p>实际上，应当在<strong>正向设计当中逐步建立起每个专业的通用样板</strong></p><p>就像在CAD当中会有规范的图层，保证出图一致性</p><p><font size=2>tips:</p><p>建立视图的常用方法</p><ul><li><p>从标高建立</p></li><li><p>画剖面（立面）</p></li><li><p>复制已有的视图</p></li></ul></font><h1 id="机电–过滤器"><a href="#机电–过滤器" class="headerlink" title="机电–过滤器"></a>机电–过滤器</h1><p>上面的设想似乎很完美，然而<strong>水暖电设计师</strong>有话说：</p><p>啊，你这模型可见性设置只能隐掉特定类型的族</p><p>那我这给水，排水都是水管</p><p>排烟，排风都是风管</p><p>强电，弱电都是桥架</p><p>怎么办？</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225205118.png" width = "300" height = "" alt="20210225205118" align=center /><p>不要急，不要慌，开发人员知道你们<del>事儿多</del>啊不是，很辛苦</p><p>所以他专门设计了对标图层管理器的神器：<strong>系统类型</strong>与<strong>过滤器</strong></p><p>首先是，<strong>系统类型</strong></p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225205547.png" width = "600" height = "" alt="20210225205547" align=center /><p>点开一根管道，我们会发现左侧属性栏中有这个参数，下拉你就可以选择不同类型的管道</p><p>管道的类型决定了它的颜色，多种管道在一起也很好分辨</p><p>那如果我只想看到给水管道怎么办呢，让我们再次按下vv，找到<strong>过滤器</strong></p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225210028.png" width = "600" height = "" alt="20210225210028" align=center /><p>把不想要的管道类型统统关掉</p><p>没有我想要关的怎么办，看到那个添加按钮了没有，点击添加，非常的人性化</p><p>怎么样，是不是可以解决我想看某一个系统的需求了</p><h1 id="隐藏、临时隐藏与隔离"><a href="#隐藏、临时隐藏与隔离" class="headerlink" title="隐藏、临时隐藏与隔离"></a>隐藏、临时隐藏与隔离</h1><p>那我还是不满意，比如说我就是不想看到某一类特定的消火栓箱，或者某一个区域的所有管道我想隐掉，或者我只想看到这面墙，怎么做？</p><p>当然可以实现，这就要说到<strong>隐藏图元</strong>和<strong>临时隐藏</strong>以及<strong>隔离图元</strong></p><h2 id="隐藏图元"><a href="#隐藏图元" class="headerlink" title="隐藏图元"></a>隐藏图元</h2><p>隐藏就隐藏，为什么要分临时不临时</p><p>是这样的，隐藏图元之后就看不到了，没有提示，可能会造成误导，重复绘制</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226094707.png" width = "600" height = "" alt="20210226094707" align=center /><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226094833.png" width = "600" height = "" alt="20210226094833" align=center /><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226094901.png" width = "600" height = "" alt="20210226094901" align=center /><p>所以隐藏图元功能（EH），常常是在出图时候调整图面使用的，或者管综时候关掉某些不需要的族</p><p>恢复的方法：底边栏的小灯泡打开可以看到隐藏的图元，右键点击你要恢复的图元，有取消隐藏的选项</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226103816.png" width = "600" height = "" alt="20210226103816" align=center /><p>实际上不太好选中</p><h2 id="临时隐藏和隔离图元"><a href="#临时隐藏和隔离图元" class="headerlink" title="临时隐藏和隔离图元"></a>临时隐藏和隔离图元</h2><p>而平时用的更多的是临时隐藏（HH）和隔离（HI)</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226104254.png" width = "600" height = "" alt="20210226104254" align=center /><p>选中构件，底边栏眼镜图标有相关选项</p><p>逻辑和CAD的图层隐藏，隔离相似</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210226104434.png" width = "600" height = "" alt="20210226104434" align=center /><p>临时隐藏/隔离会有明显的状态提示，而且当你重新打开文件，临时隐藏/隔离都会消失，很难造成误导</p><p>不需要隐藏的时候找到眼镜图标“重设临时隐藏”就好</p><ul><li>技巧：</li></ul><p>选中一个物体，快捷键SA，可以选中项目中所有同类的族/模型组，配合临时隐藏/隔离非常好用</p><h1 id="剖面框"><a href="#剖面框" class="headerlink" title="剖面框"></a>剖面框</h1><p>好了，相信以上的功能已经足够大家琢磨一段时间了，最后一个关于视图控制的功能–剖面框</p><p>常见又很好理解的功能，不过绘制时候可能用的不多，管综时候经常用</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/剖面框使用.gif" width = "600" height = "" alt="剖面框使用" align=center /><p>挂个GIF，点击三维视图，左边属性栏中“剖面框”打钩，你就会得到剖面框，调整就能达到只看某层/看看剖面的目的</p>]]></content>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;&lt;font size=4&gt;---摘要：Revit纯新手快速上手-视图控制---&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="正向设计合集" scheme="https://sanjin-z.github.io/categories/%E6%AD%A3%E5%90%91%E8%AE%BE%E8%AE%A1%E5%90%88%E9%9B%86/"/>
    
    
    <category term="Revit" scheme="https://sanjin-z.github.io/tags/Revit/"/>
    
    <category term="软件操作" scheme="https://sanjin-z.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
    <category term="视图控制" scheme="https://sanjin-z.github.io/tags/%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Revit快速上手（1）--了解Revit</title>
    <link href="https://sanjin-z.github.io/2021/022350826.html"/>
    <id>https://sanjin-z.github.io/2021/022350826.html</id>
    <published>2021-02-23T13:46:21.000Z</published>
    <updated>2021-03-05T06:30:07.526Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><font size=4>---摘要：Revit纯新手快速上手-基本概念---</font></p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>快速上手之前，掌握BIM的概念</p><p>不同于手绘向CAD的工具迭代式改变，BIM应用在<font color=red>设计方面</font>替代CAD的想法是基于这样一个思维</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210224102500.png" width = "600" height = "" alt="20210224102500" align=center /><p>传统的点对点的沟通无法高效协调各专业的设计</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">理论上，每有一个设计变动，都要向其他所有相关人员报备</span><br><span class="line">这当然不可能，所以实际上只能做节点管理</span><br><span class="line">这是一种粗放的结果管理，效率是有上限的（也就是不够精细，惧怕复杂)</span><br></pre></td></tr></table></figure><p>信息化的数据管理才是王道</p><p>我们的前面已经有软件工程设计，航空航天工程设计，机械工程设计，甚至物流工程设计等多个工程设计类别已经走过这条路了，现在的建筑工程设计信息化不令人惊讶</p><h2 id="Revit软件思路"><a href="#Revit软件思路" class="headerlink" title="Revit软件思路"></a>Revit软件思路</h2><h3 id="工作空间"><a href="#工作空间" class="headerlink" title="工作空间"></a>工作空间</h3><p>进入Revit，首先是空的三维空间</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20201126211830.png" width = "600" height = "" alt="20201126211830" align=center /><p>空白的三维空间需要原点和坐标系</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20201126212059.png" width = "600" height = "" alt="20201126212059" align=center /><p>找到底边栏灯泡图案，打开隐藏图元，就能看到“测量点”和“项目基点”</p><p>坐标系默认建出，ok，已经有了一个可以定义空间中任意一点位置的工作空间了</p><h3 id="标高与轴网"><a href="#标高与轴网" class="headerlink" title="标高与轴网"></a>标高与轴网</h3><p>标高与轴网来分割空间是最基本的设计思路，这里不赘述</p><p>那么，是先画标高还是先有轴网呢？</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20201126213614.png" width = "300" height = "" alt="20201126213614" align=center /><p>先画标高，画完标高建立分层的空间，轴网放置于空间中的每一层</p><p>操作如下:项目浏览器–→双左击立面视图–→找到默认标高–→修改高度并复制，创建自己的标高</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20201126214136.png" width = "600" height = "" alt="20201126214136" align=center /><p>再画轴网，轴网会放置在你已建标高的每一层</p><p>（有时你在某些高层平面看不见轴网，就是因为有新建的标高，旧的轴网没达到新标高高度）</p><p>操作：建筑选项卡–→点击轴网–→左键点击，划线即可</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20201126220518.png" width = "600" height = "" alt="20201126220518" align=center /><ul><li>可能的问题：没有项目浏览器怎么办</li></ul><p>视图选项卡下“用户界面”，下拉菜单中勾上即可，位置可以拖动</p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>什么叫视图，为什么需要视图</p><p>事实上在三维软件中三视图的概念依然好用（当然你可以建立自定义视图）</p><p>楼层平面实际上就是俯视该楼层得到</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20201126215303.png" width = "600" height = "" alt="20201126215303" align=center /><p>立剖也是如此</p><p>而平立剖面视图，做好标注，设置图面，套上图框，就可以转成DWG格式图纸</p><p>可想而知，对于在不同视图出现的同一个物体，改动一处，所有图纸均会更改</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20201126220140.png" width = "600" height = "" alt="20201126220140" align=center /><h3 id="族"><a href="#族" class="headerlink" title="族"></a>族</h3><p>通过工作空间的划分，以及各个视图的建立，你可以在你想要的位置绘制模型了</p><p>下一个问题，AutoCAD用线条绘制图形，Revit还用线条吗</p><p>矩形可以代表一堵墙，4条线，换成立方体，12条线······工作量*3？</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225141137.png" width = "300" height = "" alt="20210225141137" align=center /><p>那么直接放一个扁扁的立方体代表墙呢，恭喜你，开发人员也是这么想的</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225143237.png" width = "150" height = "" alt="20210225143237" align=center /><p>建筑无非也是靠各种零件组装起来的，然而要是每个三维物体都建成你想要的样子，让你直接放上去，那也太难为开发人员了</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225143520.png" width = "150" height = "" alt="20210225143520" align=center /><p>Revit使用族概念（family）解决这个问题</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210225142811.png" width = "600" height = "" alt="20210225142811" align=center /><p>我先创造一个墙的族在这里，多高多厚什么材质什么颜色你自己定义（不同的类型）</p><img src="https://s3.ax1x.com/2021/02/25/yvSbRO.png" width = "600" height = "" alt="20210225142811" align=center /><p>一个族有公共属性，每个类型有自己的独特属性，类型从属于族，就像儿子从属于…家庭！这也就是为什么人家就叫family（族）</p><p>这样就能做到既简单又比较灵活（工具软件大家都有体会，自由度越高越难精通）</p><ul><li>注意事项：时刻注意新建类型</li></ul><p><a href="https://imgtu.com/i/yv9kh6"><img src="https://s3.ax1x.com/2021/02/25/yv9kh6.png" width = "600" height = "" alt="yv9kh6.png"/></a></p><p>当你复制了原有的族类型，想要修改，<font color=red>时刻记得新建类型，就是图中的“复制”</font>，你一定不希望想改一堵墙的厚度，结果把之前的厚度全改了，两个星期之后才发现</p><h2 id="寻找已有资源"><a href="#寻找已有资源" class="headerlink" title="寻找已有资源"></a>寻找已有资源</h2><p>ok，我们已经了解了Revit中重要的几个概念，工作空间-标高轴网-视图-族-属性，你可能会奇怪为什么我不写具体操作，介绍每个按钮，下拉，勾选，空格都是干嘛的，怎么用</p><p>一方面是这个东西自己试试才能掌握，另一方面，一个工具软件而已，不是什么奇技淫巧，教程到处都是</p><p>简单的操作方法教程B站搜索即可，下面给出几个参考</p><ul><li><p><a href="https://www.bilibili.com/video/BV16J411P7Tv?p=1" target="少侠初级篇">B站-一米网校-Revit操作初级篇</a>–1080P–声音清晰–有课件–详细</p></li><li><p><a href="https://www.bilibili.com/video/BV1qJ411K7T5?from=search&seid=6999622478451740799" target="少侠中级篇">B站-一米网校-Revit操作中级篇</a>–1080P–声音清晰–有课件–详细</p></li><li><p><a href="https://space.bilibili.com/476802816?from=search&seid=9468672821694510349" target="露仔9527">B站-个人up-主讲机电</a>–1080P–声音清晰–针对项目讲解</p></li></ul><p>提示：操作合集类视频就像字典，主要用来<font color=red>查阅</font></p><p><font color=red>千万不要全看，千万不要看完了再建模</font></p><p>哪里不会找相关的内容，1.5倍速过一下</p>]]></content>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;&lt;font size=4&gt;---摘要：Revit纯新手快速上手-基本概念---&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="正向设计合集" scheme="https://sanjin-z.github.io/categories/%E6%AD%A3%E5%90%91%E8%AE%BE%E8%AE%A1%E5%90%88%E9%9B%86/"/>
    
    
    <category term="Revit" scheme="https://sanjin-z.github.io/tags/Revit/"/>
    
    <category term="软件操作" scheme="https://sanjin-z.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Revit安装相关问题</title>
    <link href="https://sanjin-z.github.io/2021/022029739.html"/>
    <id>https://sanjin-z.github.io/2021/022029739.html</id>
    <published>2021-02-20T05:48:44.000Z</published>
    <updated>2021-03-05T06:30:35.112Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><font size=4>---摘要：Revit软件简介，下载，安装及注意事项---</font></p><a id="more"></a><h2 id="Revit软件介绍"><a href="#Revit软件介绍" class="headerlink" title="Revit软件介绍"></a>Revit软件介绍</h2><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222135733.png" width = "800" height = "" alt="20210222135733" align=center /><p><strong>创建协调、一致且完整的基于模型的设计</strong></p><p>使用 Revit® 在从概念设计、可视化、分析到制造和施工的整个项目生命周期中提高效率和准确性</p><ul><li>开始在三维环境中准确和精确地建模</li><li>随着模型的开发，自动更新楼层平面图、立面和剖面</li><li>让 Revit 通过自动化功能处理日常和重复性任务，使您可以专注于价值更高的工作</li></ul><p><a href="https://www.autodesk.com.cn/products/revit/overview?term=1-YEAR&support=null#revit-intro" target="Revit软件官网">以上是来自Autodesk中文官网的软件介绍</a></p><p>当然，不需要过多的描述，Revit作为最知名的三维建筑软件，因为其多功能，多专业，族建立与流通简单，是绝大多数做正向设计或者建筑信息化的设计院绕不开的软件，如果你有意了解更多的三维建筑软件，不妨参考BIMBOX的“软件江湖”系列文章：</p><blockquote><p><a href="https://bimbox.top/351.html" target="BIMBOX">BIM江湖 | 软件兵器谱</a></p></blockquote><h2 id="Revit软件安装"><a href="#Revit软件安装" class="headerlink" title="Revit软件安装"></a>Revit软件安装</h2><p>AUTO家软件安装程序差不多，<font color=red>下载–→解压–→安装–→破解</font></p><p>当然，支持正版，规模以上公司都或多或少购买了账号，这也是软件商的盈利方式</p><p>安装教程一搜就有，这里放<a href="http://www.chinarevit.com/software" target="论坛下载">Revit中文网</a>的资源，其他BIM用到的软件、插件之类也有收录<br><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222192647.png" width = "600" height = "" alt="20210222192647" align=center /></p><h2 id="安装中遇到的问题"><a href="#安装中遇到的问题" class="headerlink" title="安装中遇到的问题"></a>安装中遇到的问题</h2><h4 id="安装过程过慢"><a href="#安装过程过慢" class="headerlink" title="安装过程过慢"></a>安装过程过慢</h4><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222193006.png" width = "" height = "" alt="20210222193006" align=center /><p>一般是在这个界面卡住，这个界面是在解压缩并安装</p><p>卡住一般是因为程序试图从官网下载自带族库和样板</p><p>所以<font color=red>需断网安装</font></p><h4 id="默认族库丢失"><a href="#默认族库丢失" class="headerlink" title="默认族库丢失"></a>默认族库丢失</h4><p>断网安装会导致默认族库丢失</p><p>安装后检查，若没有族库</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222203138.png" width = "600" height = "" alt="20210222203138" align=center /><p>可下载后解压，放入指定文件夹</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222203348.png" width = "300" height = "" alt="20210222203348" align=center /><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222204745.png" width = "300" height = "" alt="20210222204745" align=center /><p>下载链接在之前的<a href="http://www.chinarevit.com/software" target="论坛下载">Revit中文网</a>，注册机也在这个页面有下载</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222203559.png" width = "300" height = "" alt="20210222203559" align=center /><h4 id="安装报错"><a href="#安装报错" class="headerlink" title="安装报错"></a>安装报错</h4><ul><li>error1311：通常是安装包有损坏</li></ul><p>注意下载完整安装包</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222203803.png" width = "300" height = "" alt="20210222203803" align=center /><ul><li>error1719：原因Windows Installer 服务未启动</li></ul><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222204153.png" width = "300" height = "" alt="20210222204153" align=center /><p>解决方案控制面板–→管理工具–→服务–→找到Windows Installer–→选择启动方式为自动启动–→点击下方的启动(S)–→应用<br>启动完成，Win+R输入CMD回车，进入命令行界面输入regsvr32 msi.dll</p><ul><li>所有组件安装失败</li></ul><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222205101.png" width = "300" height = "" alt="20210222205101" align=center /><p>一般出现在已经安装了其他版本Revit的电脑上</p><p>安装Navisworks等软件也有类似情况</p><p>注册表冲突导致组件安装不上</p><p>使用Revit自带的卸载工具卸载AUTO系列软件（下图为默认位置）</p><img src="https://cdn.jsdelivr.net/gh/SanJin-Z/PicbedofBlog/img/20210222205851.png" width = "600" height = "" alt="20210222205851" align=center /><p>然后在管理员账户下重新安装（推荐每次安装相同软件的不同版本时，都在管理员账户下安装）</p><p>参考<a href="https://answers.microsoft.com/zh-hans/windows/forum/windows_10-security/win10%E6%80%8E%E4%B9%88%E5%90%AF%E7%94%A8administr/b93f8274-7316-4112-bfa1-5b7bfe5f46f8" target="开启并进入管理员账户">微软社区的回答</a>，开启管理员账户</p>]]></content>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;&lt;font size=4&gt;---摘要：Revit软件简介，下载，安装及注意事项---&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="正向设计合集" scheme="https://sanjin-z.github.io/categories/%E6%AD%A3%E5%90%91%E8%AE%BE%E8%AE%A1%E5%90%88%E9%9B%86/"/>
    
    
    <category term="软件安装" scheme="https://sanjin-z.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    <category term="Revit" scheme="https://sanjin-z.github.io/tags/Revit/"/>
    
  </entry>
  
  <entry>
    <title>测试博客</title>
    <link href="https://sanjin-z.github.io/2021/02047266.html"/>
    <id>https://sanjin-z.github.io/2021/02047266.html</id>
    <published>2021-02-04T05:38:44.000Z</published>
    <updated>2021-02-26T11:36:33.923Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="ccfb5af6b6f06ad40de553d794ffe50deddc72627455d811df3aca8722b3548c">10d79030e8222445804370796b90fca1a366f94c0eb92e3bbac3ce983d3a5618b9289e0e9c16e9971918130234bd2b13ba0b07f9a3e4a407ee5713865e4786ce80e22a4802c297444fda31173ec49e66f0ed916b4a19f62960184db4960a4c6ae15652b5998d9843e56eccb1a2aa4257eb2a09edb784af3b09b38036c992fab8fe7c70ebb690ba8aaf355dc5448fab2295368fb70ce1441a4f692820bbb51467d5e3323ee0656ef05fdf5823964494965850354760e5d1d89e51bfb4f59cfbfeade076eae16403f0901a0dead08aa4268c8c7ed6ef2f97a19f0c26fa2b4648607eafe872e9b9361be976cfe11e316ee2756ec74bd0e0a15271e70b53ed254b709252064045ec159ff578ed80c64096942c9e9892176054ca20faa984fdf0712901ab61fdc435453f27a725354f8cf75dcf1ea4f7982ebc3bfcc14118e26d6e7d42047d1a618d0c1bc595328b839ecae81cab9838e97de7c3ad6080702d6a4e90053b0fa888996c64fbde6a60bd86a50748df43ea9501a6dbaf14b6e46cb5ec5ed061e6bb2228bdfb66bf25362391663b50f12254a6253fbdb2004b2eff8f265e528e347fbd9658428415525224ca98377daa9322dd94418aac9d0636636bbcd33fef11ac998bce4aa58e76477875b7832358c3b1827efce3b6897638aae9095e95f70df7b2f22cc68f8134f225741fbd61f9eebc7c38b1b4c480a2f4c746240bffc39ee89fe2de5980ee703f8eeca0163f320ff79850f47bbc08f46ef02b9f64d059ba969a24994c755bcd29fd22e606bb49cf47017ea604fd43f2acc8e9d0851aea83e2742e9d1258d30d83106c9f92665ffddecb3fece018463af2b0084def26060825d25e48dab0df7629e8d33c1f04348f266b08125f3bf838bc49146f4ed95cfe39f05375dd97bd24aa7bfde13a160f98de7d89aaa0e8dec4d86cc8898049e7500e41d4a77eb93673467888fa67a0720c4bbb491769f48285d40615ee76f6c1ae5aabf9f2f0afb8108f49f3de74642c08c26a7ea04a98603630866f43d5a921bd78568ca77a01ecce071cbdaed8d07a8fd6c94cd0ffcf06f0de333f3e372c77467f4738bf1009faccc477c4d844b39562e41b76f87119d3374a53c134399c12b1c6c29ef1ec147f45ffc256ca656f049452f1733a175c395e86d6d84bb9e0f77d6ae5df29d34f03242dcee12612d8b83f50293cadbb3c7a69fe1e6e352c9781f6a9d690dab0f042f8c60db562ffef6c983f11e3d0f3626d7626f11d86405f5b315e87383b01a8a0d944c34891c8b55517f662d57f7d8531e6b029c418e582a45ce7ea38b6b995e38a069a26f3d6ab90ef04439f194a8a2bc1ebe64796c2bdc57e51ddbc324d0ee8cce56d0d77e79784d872fd96aeda103abd3dcb2f362a2c3c83324afdd4e8add0e8b6a1029e801ce9e8fd1b523d9c5f53feb72498003d4482662987b38dc6b8352a9dc8435f59a07783d9684a07a3d96a27b8b5d2a99b40f7785acf63d1f0aee9e0d01bf0926fea7b1e5ff59446d175ad4bbd091d14d8b9db9774e1ede6bfc03be3fd376f39ab446c527dec23360fdadcc6f3d37c2eed213dccf930154d16a3897d456db70b6a9ef7b24d6c963a2324c0882612dce2aaf1e1b928e75af62456faad833e6d3e36847411143400c38cd4e9e47a4c373964c369c8eb0eab947c0449246796b0c78c3378d897cd54a3327bc5bd2afb2d81866e3cfbe284002830cab884070772a6f63caae186f19731585e5a038c3b9062d7d4cb1038742d614c2d64cb3fc14218d59a702ced1ab7016f1858717e5faa07fa8913b8e0da118f5fa0e979bf8751e8ba84a46e441e7869d68f4cf6623ba14c6b8638ddf91ab8ca9b05d227ddf3274946460d190a5453f481ef2203734205f9011bf558ba9deadba2c930cee34e86da1c320a15708ed9dc1ad68772b6b8343b5e8d80fef48501805f7958f4db4d4ddd1b96bc2ca70202086e425050eab59b114060e02835a12cbb410ea67fae661e61cceb2ccca93e006915d7770ad3eb7164d932d8f896ebc6f95a641ab29d32d44fba31b12c9342cb38333a012bcfe03aeaba66d216a72817ef8116ea1aeb90f7d2770abec78d90e314c09df9c5394995605d00864e2c27d175b25fd7a88434854acf463fd3be81e99a043c4a27bd3b484caeae778affb4c1f7d9dac7773f093317dd9c626bee8f7e420abaf7a9db3e76897bb44080751e2beae8ffb5cdb1d37b412080ea0b042b7e21ae2da44fa48fae21e82cd090695aad997c02fc00498be2039ea22e1d88bf51acefa7a6c967f8c9deda3bb7dc432e4a317dcf914d3ebf07aedc7328ba94a68f42cc5845dbeebb7cbb85f93b6b156d92ba39fc5381160ad65571e60f5edbf9640483c3b0e7904307b7a26e7c509571a0c0c34268f13030a00f56da2efacefa86b630373f601962440a2373504ecbe913ddea12464420cf83a19d0c595fadf24a486bad6594045630f53940e880d678ee2c6e7e0797a1c1a48bc73bb12e11c52f95952960642db44e04605a6a6b3791c2cb4fa28daadf3266feb291a39778a7b81bbb7fde3e52e3f32f7d78353577737b7a5c042c2cd0a217f69436d2c36fc0f311ade8c73a44ead2b7423ff4351b1fdf5bdbf8937e9ff557de234884041064cdbeacb6f5bcd965a541bf46bfdea6645372c57bb7e7dde3b2806cb162f5310c8168bfbd432ad2e23af7d830e4c5831265453b0baccfe1d36c162fad1c655dd6718f11a1a993961ec3467bdba692e5192cce989f524e6f0bdabbb81d7b25e194081d105c72b5f37e0a46dbe02dd78a8401a6abc967c0989cd57ce96cf03c6d30c57a304745742a8f5eb410f809dababc27e017e09d324d37f82551e37f15d7996be23dee2d6b17408a128e10b5a39824238228a4922d50c1422757e9ca9667cf89e653f8c742597e51e6f2470bb0aa4aa5c97011c410d0059036bf124799f3afa9bb93716c68a98c70068c149c1357b86a98435ace03aa3fb12eb8665d595ab717ad6ac97db146d62a57a41923538f0a97c07c4bb39d72600d28b6b3f8448c976b318f88af7aac8e4fc9071e7561d2d44ac91793ca9704c6796e5fcb28927117101d4c395edf9f9629ce3beb643551a2300c108ee60b8655b6df91caf8d59131cc1c2567fdf64a0c292583f2d4a882411be20924715a1087e589e206b4a037975eae4893260f022aa5eb55caca31b3e1eea67487c2617b7f3229a359259e8a4be880e19574bc755da5f0a17fc5cf8d6015ac0ed79077755d832b2623e9717196564e12cbf48061f53d62b63167d6807ecf635fb36331b8f59db2ca5b7458b546de4ff239a008bcbdb322092f9c43dca2962bc0447366072572499cb23e5d0b4fbb370bdf147f17828c26d4bdb415142f135b175f298b5aca0680217d3bc5e3561949e42b61ffe2948588680e46f14be7ae742d04a7a8102af9a5cdb6e6ba6d6313c8b08c7c775d00d8e9da67d25089ee24631763a20b453b64e8d8a0d6539b03624d56d1b9e478a3457ddae49a226cacfc44edf252a01783e5a07ecde0fc22d3463024b330d6753708de1a424f63fab1c545e0651a7c7d22f23d15d27655c532c69a310057a02832b11a1e6de83b289294bc89aa5b4a51d4bf555b1f273eb72445770290768065035b6604f2cb98e2768c3bf3190d5b5e23feb3a34c395ddcc9952df493c1f582f45747cfecb2eb200ececd8d95d53a9a0d8b603d3845879e85354d87fec2b1bca2ca5a406fb91a24ab358ec0d1cf2b15bb4814db5c113d8b320efb33eacf89ec506c6e2874a472605a5f21cc4f0a4b620373aaee6b7051e461186ff83d0988b7964c2b139364a462cceac4b079f3badda116adc6fa2203e78e7a70d6c9c83e58be25a2a584d542912e66075183dd838edec62158</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-up">      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-up">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">测试密码 默认密码hello</summary>
    
    
    
    <category term="博客建立" scheme="https://sanjin-z.github.io/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B/"/>
    
    
    <category term="测试" scheme="https://sanjin-z.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>欢迎光临</title>
    <link href="https://sanjin-z.github.io/2021/020116107.html"/>
    <id>https://sanjin-z.github.io/2021/020116107.html</id>
    <published>2021-02-01T13:21:48.060Z</published>
    <updated>2021-03-01T12:48:44.342Z</updated>
    
    <content type="html"><![CDATA[<p>你好 ! 欢迎来到我的博客</p><p>此博客创立于2021年初</p><p>主要用于分享<font color=red>BIM学习、工作中的经验</font>、总结，个人的阅读记录，学习经验，与朋友的交流等</p><p>转载文章会尽量标明原作者，原链接，不用做商业用途，如有侵权行为请联系我</p><p>博客秉承互联网<font color=red>开源共享</font>的精神，非私密文章（私密文章一般是个人生活相关），可转载复制</p><h2 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h2><h3 id="评论区"><a href="#评论区" class="headerlink" title="评论区"></a>评论区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可用于反馈bug，评论文章，描述问题，和谐友好原则</span><br></pre></td></tr></table></figure><h3 id="文章分类"><a href="#文章分类" class="headerlink" title="文章分类"></a>文章分类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章在此处按类别形成合集，如“BIM软件操作”，“阅读笔记”等，分类有优先级，低级隶属于高级</span><br></pre></td></tr></table></figure><h3 id="文章标签"><a href="#文章标签" class="headerlink" title="文章标签"></a>文章标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章本身还可有标签，如“Revit”，“二次开发相关”等，无优先级，方便查看所有含有某标签的文章</span><br></pre></td></tr></table></figure><h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">支持关键字搜索，输入后回车即可</span><br></pre></td></tr></table></figure><p>更多功能：文章加密，舒服的视频浏览功能，切换夜间模式等正在开发，欢迎评论提建议</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;你好 ! 欢迎来到我的博客&lt;/p&gt;
&lt;p&gt;此博客创立于2021年初&lt;/p&gt;
&lt;p&gt;主要用于分享&lt;font color=red&gt;BIM学习、工作中的经验&lt;/font&gt;、总结，个人的阅读记录，学习经验，与朋友的交流等&lt;/p&gt;
&lt;p&gt;转载文章会尽量标明原作者，原链接，不用做商业用</summary>
      
    
    
    
    
  </entry>
  
</feed>
